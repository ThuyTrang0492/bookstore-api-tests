{
	"info": {
		"_postman_id": "318910dd-601e-407d-b7f9-d246e35a4c36",
		"name": "Book Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46176277",
		"_collection_link": "https://winter-crescent-405175.postman.co/workspace/My-Workspace~1bdeaa0c-2bbb-45da-8776-ebfaabf98fae/collection/40754843-318910dd-601e-407d-b7f9-d246e35a4c36?action=share&source=collection_link&creator=46176277"
	},
	"item": [
		{
			"name": "Books",
			"item": [
				{
					"name": "Get all books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;\r",
									"console.log(` Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"// ===============================\r",
									"//  1. KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"❌ Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\" Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"//  2. KIỂM TRA PHẢN HỒI JSON\r",
									"// ===============================\r",
									"let response;\r",
									"let isJsonValid = true;\r",
									"try {\r",
									"    response = pm.response.json();\r",
									"} catch (e) {\r",
									"    isJsonValid = false;\r",
									"    console.warn(\" Không parse được JSON:\", e);\r",
									"    pm.environment.set(\"inforMessage\", \" Phản hồi không phải JSON hợp lệ.\");\r",
									"}\r",
									"\r",
									"pm.test(\" Phản hồi là JSON hợp lệ\", () => {\r",
									"    pm.expect(isJsonValid).to.be.true;\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"//  3. TEST CHUNG CHO STATUS CODE, TIME, CONTENT-TYPE\r",
									"// ===============================\r",
									"const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
									"\r",
									"pm.test(` Status code là ${statusCode}`, () => {\r",
									"    pm.expect([200, 400, 401, 404, 500]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\" Phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\" Content-Type là application/json\", () => {\r",
									"    pm.expect(contentType.toLowerCase()).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"//  4. LOGIC KHI STATUS = 200\r",
									"// ===============================\r",
									"if (statusCode === 200) {\r",
									"    pm.test(\"200 - Thành công\", () => {\r",
									"        pm.expect(statusCode).to.eql(200);\r",
									"    });\r",
									"\r",
									"    if (isJsonValid) {\r",
									"        pm.test(\" Dữ liệu phản hồi là mảng JSON\", () => {\r",
									"            pm.expect(response).to.be.an(\"array\");\r",
									"        });\r",
									"\r",
									"        if (response.length > 0) {\r",
									"            response.forEach((book, index) => {\r",
									"                const requiredFields = [\r",
									"                    \"id\", \"title\", \"author\", \"price\",\r",
									"                    \"category\", \"stock\", \"rating\",\r",
									"                    \"publishedYear\", \"status\"\r",
									"                ];\r",
									"\r",
									"                pm.test(` Sách #${index + 1} có đủ trường & đúng kiểu`, () => {\r",
									"                    pm.expect(book).to.have.all.keys(...requiredFields);\r",
									"                    pm.expect(book.id).to.be.a(\"string\");\r",
									"                    pm.expect(book.title).to.be.a(\"string\");\r",
									"                    pm.expect(book.author).to.be.a(\"string\");\r",
									"                    pm.expect(book.price).to.be.a(\"number\");\r",
									"                    pm.expect(book.category).to.be.a(\"string\");\r",
									"                    pm.expect(book.stock).to.be.a(\"number\");\r",
									"                    pm.expect(book.rating).to.be.a(\"number\");\r",
									"                    pm.expect(book.publishedYear).to.be.a(\"number\");\r",
									"                    pm.expect([\"available\", \"out_of_stock\"]).to.include(book.status);\r",
									"                });\r",
									"            });\r",
									"\r",
									"            pm.environment.set(\"bookId\", response[0].id);\r",
									"            const msg = ` Có sách: ${response.map(b => b.title).join(\", \")}`;\r",
									"            pm.environment.set(\"inforMessage\", msg);\r",
									"        } else {\r",
									"            pm.environment.set(\"inforMessage\", \" Phản hồi 200 nhưng không có sách nào.\");\r",
									"            pm.test(\" Mảng sách rỗng\", () => {\r",
									"                pm.expect.fail(\"Phản hồi 200 nhưng không có dữ liệu sách.\");\r",
									"            });\r",
									"        }\r",
									"    } else {\r",
									"        pm.test(\"❌ Không parse được JSON\", () => {\r",
									"            pm.expect.fail(\"Phản hồi không phải JSON hợp lệ.\");\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  5. XỬ LÝ TRẠNG THÁI KHÁC\r",
									"// ===============================\r",
									"if (statusCode === 400) {\r",
									"    pm.test(\" 400 - Yêu cầu không hợp lệ\", () => {\r",
									"        pm.expect(statusCode).to.eql(400);\r",
									"    });\r",
									"    const msg = isJsonValid && response.message\r",
									"        ? response.message\r",
									"        : \" Lỗi 400: Không rõ lý do.\";\r",
									"    pm.environment.set(\"inforMessage\", msg);\r",
									"}\r",
									"\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\" 401 - Không có quyền hoặc chưa xác thực\", () => {\r",
									"        pm.expect(statusCode).to.eql(401);\r",
									"    });\r",
									"    const msg = isJsonValid && response.message\r",
									"        ? response.message\r",
									"        : \" Lỗi 401: Không được xác thực.\";\r",
									"    pm.environment.set(\"inforMessage\", msg);\r",
									"}\r",
									"\r",
									"if (statusCode === 404) {\r",
									"    pm.test(\" 404 - Không tìm thấy tài nguyên\", () => {\r",
									"        pm.expect(statusCode).to.eql(404);\r",
									"    });\r",
									"\r",
									"    if (!isJsonValid || !response || typeof response !== 'object') {\r",
									"        pm.test(\"❌ Phản hồi 404 nhưng không phải JSON hợp lệ\", () => {\r",
									"            pm.expect.fail(\"Phản hồi không hợp lệ hoặc không phải JSON.\");\r",
									"        });\r",
									"        pm.environment.set(\"inforMessage\", \"❌ Phản hồi không hợp lệ hoặc không parse được.\");\r",
									"    } else if (!response.message || response.message.trim() === \"\") {\r",
									"        pm.test(\"❌ 404 trả về nhưng không có thông báo lỗi (message)\", () => {\r",
									"            pm.expect.fail(\"API trả về 404 nhưng không có nội dung message để giải thích.\");\r",
									"        });\r",
									"        pm.environment.set(\"inforMessage\", \"❌ Thiếu message trong phản hồi 404.\");\r",
									"    } else {\r",
									"        pm.test(\" Phản hồi 404 có message mô tả\", () => {\r",
									"            pm.expect(response).to.have.property(\"message\");\r",
									"            pm.expect(response.message.length).to.be.greaterThan(0);\r",
									"        });\r",
									"        pm.environment.set(\"inforMessage\", response.message);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\" 500 - Lỗi phía server\", () => {\r",
									"        pm.expect(statusCode).to.eql(500);\r",
									"    });\r",
									"    pm.environment.set(\"inforMessage\", \" Lỗi phía backend (logic hoặc server)\");\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"// XỬ LÝ STATUS CODE KHÔNG MONG ĐỢI\r",
									"// ===============================\r",
									"if (![200, 400, 401, 404, 500].includes(statusCode)) {\r",
									"    pm.test(\" Status code không nằm trong danh sách mong đợi\", () => {\r",
									"        pm.expect.fail(`Status code không được xử lý: ${statusCode}`);\r",
									"    });\r",
									"    pm.environment.set(\"inforMessage\", ` Mã phản hồi không nằm trong danh sách xử lý: ${statusCode}`);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//pm.environment.set(\"admin_token\",\"fake-admin-token-9\");\r",
									"//pm.environment.set(\"admin_token\",\"fake-admin-token-999\");\r",
									"\r",
									"\r",
									"//pm.environment.set(\"user_token\",\"fake-user-token-9\");\r",
									"//pm.environment.set(\"user_token\",\"fake-user-token-999\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						},
						"description": "Truy xuất toàn bộ danh sách các cuốn sách hiện có trong hệ thống.  \nĐây là chức năng “Read” trong mô hình CRUD (Create - Read - Update - Delete).  \nSử dụng để kiểm tra dữ liệu hiện tại hoặc sau khi thực hiện các thao tác thêm/xoá/sửa."
					},
					"response": []
				},
				{
					"name": "Get book by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const statusCode = pm.response.code;\r",
									"console.log(` Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"// ===============================\r",
									"//  1. KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"❌ Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\" Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"// === Parse JSON an toàn ===\r",
									"let response;\r",
									"let isJsonValid = true;\r",
									"try {\r",
									"    response = pm.response.json();\r",
									"} catch (e) {\r",
									"    isJsonValid = false;\r",
									"    console.warn(\"❌ Không parse được JSON:\", e);\r",
									"    pm.environment.set(\"inforMessage\", \"❌ Phản hồi không phải JSON hợp lệ.\");\r",
									"}\r",
									"\r",
									"// === Lấy status code và bookId đang test ===\r",
									"\r",
									"const bookId = pm.environment.get(\"bookId\");\r",
									"console.log(\" bookId đang test:\", bookId);\r",
									"\r",
									"// === Kiểm tra status code nằm trong danh sách hợp lệ ===\r",
									"pm.test(` Status code là ${statusCode}`, () => {\r",
									"    pm.expect([200, 400, 401, 403, 404, 500]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"// === Kiểm tra JSON hợp lệ nếu có ===\r",
									"if (isJsonValid) {\r",
									"    pm.test(\" Phản hồi là JSON hợp lệ\", () => {\r",
									"        pm.expect(response).to.be.an(\"object\");\r",
									"    });\r",
									"\r",
									"    // Chỉ test 'message' nếu KHÔNG phải 200\r",
									"    if (statusCode !== 200) {\r",
									"        pm.test(\" Phản hồi có trường 'message'\", () => {\r",
									"            pm.expect(response).to.have.property(\"message\");\r",
									"            pm.expect(response.message).to.be.a(\"string\").and.not.empty;\r",
									"        });\r",
									"    }\r",
									"} else {\r",
									"    pm.test(\"❌ Phản hồi không phải JSON\", () => {\r",
									"        pm.expect.fail(\"Không thể parse JSON từ phản hồi\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// === Phân nhánh xử lý theo status code ===\r",
									"switch (statusCode) {\r",
									"    case 200:\r",
									"        pm.test(\" 200 - Thành công\", () => {\r",
									"            pm.expect(statusCode).to.eql(200);\r",
									"        });\r",
									"\r",
									"        if (isJsonValid) {\r",
									"            const book = response;\r",
									"            const expectedKeys = [\r",
									"                \"id\", \"title\", \"author\", \"price\", \"category\",\r",
									"                \"stock\", \"rating\", \"publishedYear\", \"status\"\r",
									"            ];\r",
									"\r",
									"            pm.test(\" Book có đủ trường\", () => {\r",
									"                pm.expect(book).to.have.all.keys(...expectedKeys);\r",
									"            });\r",
									"\r",
									"            pm.test(\" Book có kiểu dữ liệu đúng\", () => {\r",
									"                const type = typeof book.id;\r",
									"                pm.expect([\"string\", \"number\"]).to.include(type);\r",
									"                pm.expect(book.title).to.be.a(\"string\");\r",
									"                pm.expect(book.author).to.be.a(\"string\");\r",
									"                pm.expect(book.price).to.be.a(\"number\");\r",
									"                pm.expect(book.category).to.be.a(\"string\");\r",
									"                pm.expect(book.stock).to.be.a(\"number\");\r",
									"                pm.expect(book.rating).to.be.a(\"number\");\r",
									"                pm.expect(book.publishedYear).to.be.a(\"number\");\r",
									"                pm.expect([\"available\", \"out_of_stock\"]).to.include(book.status);\r",
									"            });\r",
									"\r",
									"            // Lưu lại thông tin\r",
									"            pm.environment.set(\"bookId\", book.id);\r",
									"            pm.environment.set(\"inforMessage\", ` Book: ${book.title}`);\r",
									"        }\r",
									"        break;\r",
									"\r",
									"    case 404:\r",
									"        pm.test(\"❌ 404 - Có message lỗi hợp lệ\", () => {\r",
									"            pm.expect(response.message).to.be.a(\"string\").and.not.empty;\r",
									"        });\r",
									"        break;\r",
									"\r",
									"    case 401:\r",
									"        pm.test(\"401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"            pm.expect(true).to.be.true; // Test này luôn pass, dùng để hiển thị cảnh báo bên dưới\r",
									"            console.warn(\"Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"401 - Message chứa mã lỗi hoặc thông tin xác thực\", () => {\r",
									"            pm.expect(response.message).to.match(/401|unauthorized|chưa xác thực|không có quyền/i);\r",
									"        });\r",
									"        break;\r",
									"\r",
									"    case 403:\r",
									"        pm.test(\" 403 - Không có quyền truy cập\", () => {\r",
									"            pm.expect(response.message).to.include(\"403\");\r",
									"        });\r",
									"        break;\r",
									"\r",
									"    case 400:\r",
									"        pm.test(\"🚫 400 - Dữ liệu không hợp lệ\", () => {\r",
									"            pm.expect(response.message).to.be.a(\"string\").and.not.empty;\r",
									"        });\r",
									"    break;\r",
									"\r",
									"    case 500:\r",
									"        pm.test(\" 500 - Lỗi phía server\", () => {\r",
									"            pm.expect(response.message || \"\").to.include(\"lỗi\");\r",
									"        });\r",
									"        break;\r",
									"\r",
									"    default:\r",
									"        pm.test(\" Mã trạng thái chưa được xử lý\", () => {\r",
									"            pm.expect.fail(`Không xử lý được status code: ${statusCode}`);\r",
									"        });\r",
									"}\r",
									"\r",
									"// === Kiểm tra thời gian phản hồi ===\r",
									"pm.test(\" Phản hồi < 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// //Kiểm tra bookId đúng\r",
									" pm.environment.set(\"bookId\", \"1\"); \r",
									"// //Kiểm tra bookId null\r",
									"// pm.environment.set(\"bookId\", \"null\"); \r",
									"// //Kiểm tra bookId rỗng\r",
									" //pm.environment.set(\"bookId\", \"\"); \r",
									"// //Kiểm tra bookId sai định dạng\r",
									"//pm.environment.set(\"bookId\", \"abc\"); \r",
									"// //Kiểm tra bookId ký tự đặc biệt\r",
									"// pm.environment.set(\"bookId\", \"@\"); \r",
									"// //Kiểm tra bookId không tồn tại\r",
									" //pm.environment.set(\"bookId\", \"999\"); \r",
									"// //Kiểm tra bookId số âm\r",
									" //pm.environment.set(\"bookId\", \"-1\"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						},
						"description": "Lấy thông tin chi tiết của một cuốn sách dựa vào id.  \nSử dụng khi cần xem hoặc kiểm tra dữ liệu cụ thể.  \nNếu ID không tồn tại, API sẽ trả về 404."
					},
					"response": []
				},
				{
					"name": "Create new book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ===============================\r",
									"//BIẾN DÙNG CHUNG\r",
									"// ===============================\r",
									"const statusCode = pm.response.code;\r",
									"console.log(` Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
									"const currentYear = new Date().getFullYear();\r",
									"const testingDuplicateTitle = pm.environment.get(\"testingDuplicateTitle\") === \"true\";\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\" Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA PHẢN HỒI JSON\r",
									"// ===============================\r",
									"let response;\r",
									"let isJsonValid = true;\r",
									"\r",
									"try {\r",
									"    response = pm.response.json();\r",
									"} catch (e) {\r",
									"    isJsonValid = false;\r",
									"    console.error(\"Phản hồi không phải JSON hợp lệ:\", e);\r",
									"    pm.environment.set(\"inforMessage\", \"JSON không hợp lệ\");\r",
									"}\r",
									"const msg = (isJsonValid && typeof response === 'object')\r",
									"    ? (response.message || response.error || \"\").toString().trim().toLowerCase()\r",
									"    : \"\";\r",
									"\r",
									"if (isJsonValid) {\r",
									"    pm.test(\" Phản hồi là JSON hợp lệ\", () => {\r",
									"        pm.expect(response).to.be.an(\"object\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  TEST CHUNG: status, time, content-type\r",
									"// ===============================\r",
									"pm.test(\" Content-Type là application/json\", () => {\r",
									"    pm.expect(contentType).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(` Status code là ${statusCode}`, () => {\r",
									"    pm.expect([201, 400, 401, 403,404, 409, 500]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\" Phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"//  XỬ LÝ DỮ LIỆU GỬI LÊN\r",
									"// ===============================\r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = JSON.parse(pm.request.body.raw || \"{}\");\r",
									"} catch (e) {\r",
									"    console.warn(\" Không parse được body gửi lên:\", e);\r",
									"}\r",
									"\r",
									"function isRequestValid(data) {\r",
									"    return (\r",
									"        data.title && data.title.trim() !== \"\" &&\r",
									"        data.author && data.author.trim() !== \"\" &&\r",
									"        typeof data.price === \"number\" && data.price >= 0 &&\r",
									"        typeof data.stock === \"number\" && data.stock >= 0 &&\r",
									"        typeof data.rating === \"number\" && data.rating >= 1 && data.rating <= 5 &&\r",
									"        typeof data.publishedYear === \"number\" && data.publishedYear <= currentYear &&\r",
									"        typeof data.category === \"string\" && data.category.trim() !== \"\" &&\r",
									"        [\"available\", \"out_of_stock\"].includes((data.status || \"\").toLowerCase())\r",
									"    );\r",
									"}\r",
									"\r",
									"const inputIsValid = isRequestValid(requestBody);\r",
									"\r",
									"// ===============================\r",
									"// XỬ LÝ KHI STATUS = 201\r",
									"// ===============================\r",
									"if (statusCode === 201) {\r",
									"    if (!inputIsValid) {\r",
									"        pm.test(\"❌ Không nên trả về 201 với dữ liệu không hợp lệ\", () => {\r",
									"            pm.expect.fail(\"Dữ liệu đầu vào không hợp lệ nhưng server vẫn trả về 201 Created.\");\r",
									"        });\r",
									"    }\r",
									"\r",
									"    if (testingDuplicateTitle) {\r",
									"        pm.test(\"❌ Không nên trả về 201 nếu title bị trùng\", () => {\r",
									"            pm.expect.fail(\"Title bị trùng nhưng server vẫn trả về 201. Cần xử lý trả về 409.\");\r",
									"        });\r",
									"    }\r",
									"\r",
									"    if (inputIsValid && !testingDuplicateTitle) {\r",
									"        pm.environment.set(\"bookId\", response.id || \"\");\r",
									"\r",
									"        const requiredFields = [\r",
									"            \"id\", \"title\", \"author\", \"price\", \"category\",\r",
									"            \"stock\", \"rating\", \"publishedYear\", \"status\"\r",
									"        ];\r",
									"\r",
									"        pm.test(\" Có đầy đủ các trường dữ liệu\", () => {\r",
									"            pm.expect(response).to.have.all.keys(...requiredFields);\r",
									"        });\r",
									"\r",
									"        pm.test(\" Kiểu dữ liệu đúng và hợp lệ\", () => {\r",
									"            pm.expect(response.id).to.be.a(\"string\");\r",
									"            pm.expect(response.title).to.be.a(\"string\");\r",
									"            pm.expect(response.author).to.be.a(\"string\");\r",
									"            pm.expect(response.price).to.be.a(\"number\").and.at.least(0);\r",
									"            pm.expect(response.category).to.be.a(\"string\");\r",
									"            pm.expect(response.stock).to.be.a(\"number\").and.at.least(0);\r",
									"            pm.expect(response.rating).to.be.a(\"number\").and.within(1, 5);\r",
									"            pm.expect(response.publishedYear).to.be.a(\"number\").and.at.most(currentYear);\r",
									"            pm.expect([\"available\", \"out_of_stock\"]).to.include(response.status.toLowerCase());\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//   XỬ LÝ LỖI: 400, 409, 403, 401, 500\r",
									"// ===============================\r",
									"if ([400, 409].includes(statusCode)) {\r",
									"    const msg = (response.message || response.error || \"\").toLowerCase().trim();\r",
									"\r",
									"    pm.test(\" Có thông báo lỗi phù hợp\", () => {\r",
									"        pm.expect(msg.length).to.be.above(0);\r",
									"        pm.expect(msg).to.match(/title|author|missing|required|thiếu|bắt buộc|blank|empty|trùng|duplicate|price|stock|rating|published\\s?year|năm xuất bản|status|khoảng trắng|chỉ chứa khoảng trắng/i);\r",
									"    });\r",
									"\r",
									"    if (msg.includes(\"status\") && msg.match(/invalid|không hợp lệ/i)) {\r",
									"        pm.test(\" 'status' chỉ được phép là 'available' hoặc 'out_of_stock'\", () => {\r",
									"            pm.expect(msg).to.match(/available|out_of_stock/i);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\" 401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\" Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 403) {\r",
									"    const msg = (response.message || \"\").toLowerCase().trim();\r",
									"    pm.test(\"Người dùng không có quyền tạo sách\", () => {\r",
									"        pm.expect(msg.length).to.be.above(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 404) {\r",
									"    const msg = (response?.message || response?.error || \"\").trim();\r",
									"\r",
									"    pm.test(\"404 - Không tìm thấy tài nguyên\", () => {\r",
									"        pm.expect(statusCode).to.eql(404);\r",
									"    });\r",
									"\r",
									"    pm.test(\" Phản hồi 404 phải có message\", () => {\r",
									"        pm.expect(msg.length).to.be.greaterThan(0, \"Phản hồi 404 thiếu message mô tả.\");\r",
									"        pm.expect(msg.toLowerCase()).to.match(/not\\s?found|không tìm thấy|not exist|invalid/i);\r",
									"    });\r",
									"\r",
									"    // Cảnh báo nếu URL có vẻ sai mà lại trả về 200\r",
									"    const requestUrl = pm.request.url.toString();\r",
									"    const looksLikeInvalidPath = /(invalid|fake|wrong|notfound|nonexistent|404|sai)/i.test(requestUrl);\r",
									"    if (!looksLikeInvalidPath) {\r",
									"        console.warn(\"  Đường dẫn không rõ là sai, bạn nên kiểm tra thủ công.\");\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\" 500 - Lỗi phía server\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\" Có lỗi phía backend (logic hoặc server)\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// //Kiểm tra tạo sách mới với title trùng\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Trở lại\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 70000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 6,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// pm.environment.set(\"testingDuplicateTitle\", \"true\"); \r",
									"// // Kiểm tra tạo sách mới thành công\r",
									"pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"    title: \"Năm Tháng Rực Rỡ\",\r",
									"    author: \"Nguyễn Thị Thùy Trang\",\r",
									"    price: 70000,\r",
									"    category: \"Đời Sống\",\r",
									"    stock: 5,\r",
									"    rating: 4.5,\r",
									"    publishedYear: 2025,\r",
									"    status: \"available\"\r",
									"}));\r",
									"// //Kiểm tra Sách thiếu trường title,author,price,category,stock,rating,publishedYear,status\r",
									"//  pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra Sách trường title rỗng\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// // Kiểm tra title là null\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: null,\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra title có định dạng sai\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"1234567890\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra Sách trường author rỗng \r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// // Kiểm tra author là null\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: null,\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra author có định dạng sai\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"1234567890\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra author có ký tự đặc biệt\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"@\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra Sách trường price rỗng \r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: \"\",\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// // Kiểm tra price là null\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: null,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra price có định dạng sai\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: \"abc\",\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra price có ký tự đặc biệt\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: \"abc\",\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra price là số âm\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: \"-60000\",\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"\r",
									"// //Kiểm tra Sách trường category rỗng \r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Aii\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// // Kiểm tra category là null\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: null,\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra category có định dạng sai\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: \"60000\",\r",
									"//     category: \"123\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra category có ký tự đặc biệt\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: \"60000\",\r",
									"//     category: \"@\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"\r",
									"// //Kiểm tra Sách trường stock rỗng \r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: \"\",\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// // Kiểm tra stock là null\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: null,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra stock có định dạng sai\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: \"abc\",\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"//Kiểm tra stock có ký tự đặc biệt\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: \"@\",\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// Kiểm tra stock là số âm\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: \"-6\",\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra Sách trường rating rỗng \r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: \"\",\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// // Kiểm tra rating là null\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: null,\r",
									"//     publishedYear: 2025,\r",
									"//     status:\"available\"\r",
									"// }));\r",
									"// //Kiểm tra rating có định dạng sai\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: \"abc\",\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra rating có ký tự đặc biệt\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: \"@\",\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra rating nhỏ hơn 1\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 0,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra rating lớn hơn 5\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 6,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"//Kiểm tra rating là số âm\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: -5,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"\r",
									"// //Kiểm tra Sách trường publishedYear rỗng \r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating:4,\r",
									"//     publishedYear: \"\",\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// // Kiểm tra publishedYear là null\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: null,\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra publishedYear có đinh dạng sai\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: \"abc\",\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// // Kiểm tra publishedYear có kí tự đặc biệt\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: \"@\",\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// // Kiểm tra publishedYear lớn hơn năm hiện tại\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: \"9999\",\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"// //Kiểm tra publishedYear là số âm\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: \"-2025\",\r",
									"//     status: \"available\"\r",
									"// }));\r",
									"\r",
									"\r",
									"// //Kiểm tra Sách trường status rỗng\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"\"\r",
									"// }));\r",
									"// // Kiểm tra status là null\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: null\r",
									"// }));   \r",
									"// //Kiểm tra status có đinh dạng sai\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"123\"\r",
									"// })); \r",
									"// // Kiểm tra status chỉ thuộc hai trường available và out_of_stock\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"avai\"\r",
									"// })); \r",
									"// // Kiểm tra status có kí tự đặc biệt\r",
									"// pm.environment.set(\"bookBody\", JSON.stringify({\r",
									"//     title: \"Thanh Xuân Đó Có Ai\",\r",
									"//     author: \"Nguyễn Thị Thùy Trang\",\r",
									"//     price: 60000,\r",
									"//     category: \"Đời Sống\",\r",
									"//     stock: 5,\r",
									"//     rating: 4,\r",
									"//     publishedYear: 2025,\r",
									"//     status: \"@\"\r",
									"// })); \r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": true,
						"insecureHTTPParser": false,
						"removeRefererHeaderOnRedirect": true,
						"followAuthorizationHeader": true,
						"followOriginalHttpMethod": true,
						"disableCookies": true,
						"tlsPreferServerCiphers": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{bookBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						},
						"description": "Gửi yêu cầu để thêm một cuốn sách mới vào danh sách.  \nĐây là thao tác “Create” trong mô hình CRUD.  \nTrường id sẽ được tự động tạo bởi json-sever."
					},
					"response": []
				},
				{
					"name": "Update book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ===============================\r",
									"//  KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const statusCode = pm.response.code;\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\"fake-admin-token-999\", \"fake-user-token-123\"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"//  PARSE PHẢN HỒI JSON AN TOÀN\r",
									"// ===============================\r",
									"let response;\r",
									"let isJsonValid = true;\r",
									"\r",
									"try {\r",
									"    response = pm.response.json();\r",
									"} catch (e) {\r",
									"    isJsonValid = false;\r",
									"    console.error(\"JSON không hợp lệ:\", e);\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  TEST CHUNG\r",
									"// ===============================\r",
									"pm.test(`Status code là ${statusCode}`, () => {\r",
									"    pm.expect([200, 400, 401, 403, 404, 409, 500]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"pm.test(\"Content-Type là application/json\", () => {\r",
									"    pm.expect(contentType).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"//  PHÂN TÍCH REQUEST BODY GỬI LÊN\r",
									"// ===============================\r",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"// ===============================\r",
									"//  LOGIC KHI STATUS = 200\r",
									"// ===============================\r",
									"if (isJsonValid && typeof response === \"object\" && statusCode === 200) {\r",
									"    pm.test(\"Cập nhật thành công (200 OK)\", () => {\r",
									"        pm.expect(response).to.have.property(\"id\");\r",
									"    });\r",
									"\r",
									"    pm.environment.set(\"bookId\", response.id);\r",
									"\r",
									"    const requiredFields = [\r",
									"        \"id\", \"title\", \"author\", \"price\", \"category\",\r",
									"        \"stock\", \"rating\", \"publishedYear\", \"status\"\r",
									"    ];\r",
									"\r",
									"    requiredFields.forEach(field => {\r",
									"        pm.test(`Có trường '${field}'`, () => {\r",
									"            pm.expect(response).to.have.property(field);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    const fieldTypes = {\r",
									"        id: 'string',\r",
									"        title: 'string',\r",
									"        author: 'string',\r",
									"        price: 'number',\r",
									"        category: 'string',\r",
									"        stock: 'number',\r",
									"        rating: 'number',\r",
									"        publishedYear: 'number',\r",
									"        status: 'string'\r",
									"    };\r",
									"\r",
									"    Object.entries(fieldTypes).forEach(([field, type]) => {\r",
									"        pm.test(`Kiểu '${field}' là ${type}`, () => {\r",
									"            pm.expect(response[field]).to.be.a(type);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    pm.test(\"Giá không âm\", () => {\r",
									"        pm.expect(response.price).to.be.at.least(0);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Stock không âm\", () => {\r",
									"        pm.expect(response.stock).to.be.at.least(0);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Rating từ 1 đến 5\", () => {\r",
									"        pm.expect(response.rating).to.be.within(1, 5);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Năm xuất bản không lớn hơn hiện tại\", () => {\r",
									"        pm.expect(response.publishedYear).to.be.at.most(new Date().getFullYear());\r",
									"    });\r",
									"\r",
									"    pm.test(\"ID không bị thay đổi nếu có gửi\", () => {\r",
									"        if (requestBody.id) {\r",
									"            pm.expect(response.id).not.eql(requestBody.id);\r",
									"        }\r",
									"    });\r",
									"\r",
									"    // ✅ Bổ sung chính xác logic kiểm tra cập nhật trùng dữ liệu\r",
									"    pm.test(\"❌ Không nên trả về 200 nếu dữ liệu không thay đổi\", () => {\r",
									"        let isSame = true;\r",
									"        for (const key in requestBody) {\r",
									"            if (key !== \"id\" && response[key] !== undefined) {\r",
									"                if (JSON.stringify(requestBody[key]) !== JSON.stringify(response[key])) {\r",
									"                    isSame = false;\r",
									"                    break;\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"\r",
									"        if (isSame) {\r",
									"            pm.expect.fail(\"Dữ liệu gửi lên không khác gì so với trước, nhưng server vẫn trả về 200.\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  XỬ LÝ CÁC LỖI KHÁC\r",
									"// ===============================\r",
									"if (isJsonValid && typeof response === \"object\") {\r",
									"    const msg = (response.message || \"\").toLowerCase().trim();\r",
									"\r",
									"    if ([400, 409].includes(statusCode)) {\r",
									"        pm.test(\" Lỗi 400/409 phải có thông báo lỗi rõ ràng\", () => {\r",
									"            if (!msg) pm.expect.fail(\"Phản hồi không có message.\");\r",
									"        });\r",
									"\r",
									"        if (/title/i.test(msg) && /(exists|duplicate|trùng)/i.test(msg)) {\r",
									"            pm.test(\" Có lỗi: tiêu đề bị trùng\", () => {\r",
									"                pm.expect(true).to.be.true;\r",
									"            });\r",
									"        } else {\r",
									"            pm.test(\"❌ Nếu đang test lỗi trùng title mà không thấy cảnh báo\", () => {\r",
									"                if (requestBody.title) {\r",
									"                    pm.expect.fail(\"Không thấy thông báo title bị trùng.\");\r",
									"                }\r",
									"            });\r",
									"        }\r",
									"\r",
									"        if (/missing|required|thiếu|blank|khoảng trắng|chỉ chứa khoảng trắng/i.test(msg)) {\r",
									"            pm.test(\" Có lỗi: thiếu trường hoặc chỉ chứa khoảng trắng\", () => {\r",
									"                pm.expect(true).to.be.true;\r",
									"            });\r",
									"        } else if (Object.values(requestBody).some(v => typeof v === \"string\" && v.trim() === \"\")) {\r",
									"            pm.test(\"❌ Không phát hiện giá trị rỗng/blank\", () => {\r",
									"                pm.expect.fail(\"Request có giá trị blank nhưng server không trả lỗi.\");\r",
									"            });\r",
									"        }\r",
									"\r",
									"        if (/price|stock|rating|publishedyear|status|năm xuất bản/i.test(msg)) {\r",
									"            pm.test(\" Có lỗi: sai kiểu dữ liệu hoặc giá trị không hợp lệ\", () => {\r",
									"                pm.expect(true).to.be.true;\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"\r",
									"    if (statusCode === 403) {\r",
									"        pm.test(\"❌ 403 - Phải thông báo không có quyền\", () => {\r",
									"            if (!msg.includes(\"không có quyền\")) {\r",
									"                pm.expect.fail(\"403 trả về nhưng không thông báo rõ ràng về quyền truy cập.\");\r",
									"            }\r",
									"        });\r",
									"\r",
									"        pm.test(\" Không phải lỗi xác thực (401)\", () => {\r",
									"            pm.expect(msg.includes(\"không xác thực\")).to.be.false;\r",
									"        });\r",
									"    }\r",
									"\r",
									"    if (statusCode === 401) {\r",
									"        pm.test(\"❌ 401 - Phải có thông báo xác thực\", () => {\r",
									"            if (!msg.includes(\"không xác thực\") && !msg.includes(\"unauthorized\")) {\r",
									"                pm.expect.fail(\"401 trả về nhưng không có thông báo xác thực.\");\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"\r",
									"    if (statusCode === 404) {\r",
									"        pm.test(\"❌ 404 - Phải có message không tìm thấy\", () => {\r",
									"            if (!msg.includes(\"không tồn tại\") && !msg.includes(\"not found\")) {\r",
									"                pm.expect.fail(\"404 trả về nhưng không có thông báo rõ ràng.\");\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"\r",
									"    if (statusCode === 500) {\r",
									"        pm.test(\" 500 - Lỗi phía server\", () => {\r",
									"            if (!msg || msg.length === 0) {\r",
									"                pm.expect.fail(\"500 trả về nhưng không có message lỗi.\");\r",
									"            }\r",
									"            pm.expect(msg).to.match(/(lỗi|error|server|backend)/i);\r",
									"        });\r",
									"\r",
									"        console.error(\" Lỗi 500 từ backend:\", msg);\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// //Id sách không tồn tại\r",
									"// pm.environment.set(\"bookId\", \"999\"); \r",
									"// Id sách hợp lệ\r",
									"//pm.environment.set(\"bookId\", \"50\"); \r",
									"// // Id sách không đúng định dạng\r",
									"// pm.environment.set(\"bookId\", \"@\"); \r",
									"// // Id sách không phải là số\r",
									"// pm.environment.set(\"bookId\", \"abc\");\r",
									"// // Id sách không phải là số nguyên\r",
									"// pm.environment.set(\"bookId\", \"-1\");\r",
									"// // Id sách null\r",
									"// pm.environment.set(\"bookId\", \"null\");\r",
									"// // Id sách rỗng\r",
									"// pm.environment.set(\"bookId\", \"\");\r",
									"//Kiểm tra Update thành công tất cả giá trị\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//   \"title\": \"Cuộc Đời Của Cô Gái Trẻ\",\r",
									"//   \"author\": \"Hỏa Tinh\",\r",
									"//   \"price\": 50000,\r",
									"//   \"category\": \"Tiểu thuyết\",\r",
									"//   \"stock\": 6,\r",
									"//   \"rating\": 5,\r",
									"//   \"publishedYear\": 2025,\r",
									"//   \"status\": \"available\"\r",
									"// }));\r",
									"// //Kiểm tra update trùng title\r",
									"//  pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//    \"title\": \"Cuộc Đời Của Cô Gái Trẻ\",\r",
									"//  }));\r",
									"// //Kiểm tra update không có giá trị\r",
									"// //Kiểm tra update các trường rỗng title,author,category,status\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//   \"title\": \"\",\r",
									"//   \"author\": \"\",\r",
									"//   \"category\": \"\",\r",
									"//   \"status\": \"\"\r",
									"// }));\r",
									"// //Kiểm tra update với price là số âm\r",
									"pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"    \"price\": -10000\r",
									"}));\r",
									"// //Kiểm tra update với stock là số âm\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"stock\": -1\r",
									"// }));\r",
									"// //Kiểm tra update với rating là số âm\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"rating\": -1\r",
									"// }));\r",
									"// //Kiểm tra update với publishedYear là số âm\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"publishedYear\": -1\r",
									"// }));\r",
									"// //Kiểm tra update với price là chuỗi\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"price\": \"abc\"\r",
									"// }));\r",
									"// //Kiểm tra update với stock là chuỗi\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"stock\": \"abc\"\r",
									"// }));\r",
									"// //Kiểm tra update với rating là chuỗi\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"rating\": \"abc\"\r",
									"// }));\r",
									"// //Kiểm tra update với publishedYear là chuỗi\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"publishedYear\": \"abc\"\r",
									"// }));\r",
									"// //Kiểm tra update với price là null\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"// }));\r",
									"// //Kiểm tra update với stock là null \r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"// }));\r",
									"// //Kiểm tra update với rating là null\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"// }));\r",
									"// //Kiểm tra update với publishedYear là null\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"// }));\r",
									"// // Kiểm tra với title là sai định dạng\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"title\": 123\r",
									"// }));\r",
									"// // Kiểm tra với author là sai định dạng\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"author\": 123\r",
									"// }));\r",
									"// // Kiểm tra với category là sai định dạng\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"category\": 123\r",
									"// }));\r",
									"// // Kiểm tra với status là sai định dạng\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"status\": 123\r",
									"// }));\r",
									"// // Kiểm tra với rating nhỏ hơn 1\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"rating\": 0\r",
									"// }));\r",
									"// // Kiểm tra với rating lớn hơn 5\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"rating\": 6\r",
									"// }));\r",
									"// //Kiểm tra với publishedYear lớn hơn năm hiên tại\r",
									"// pm.environment.set(\"updateBody\", JSON.stringify({\r",
									"//     \"publishedYear\": \"9999\"\r",
									"// }));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{updateBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						},
						"description": "Cập nhật toàn bộ thông tin của một cuốn sách theo id.  \nPhù hợp khi chỉnh sửa nội dung hoặc giá sách.  \nNếu id không tồn tại, server không trả về lỗi nhưng không có gì thay đổi."
					},
					"response": []
				},
				{
					"name": "Get Books Sorted by Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ===============================\r",
									"// KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const statusCode = pm.response.code;\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"// Kiểm tra token nghi ngờ là giả\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"// Danh sách token giả được cho phép (test hợp lệ)\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"// Test: Token không hợp lệ nhưng trả về 200 (cảnh báo sai)\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Test: Header Authorization tồn tại và có định dạng đúng\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA PHẢN HỒI JSON\r",
									"// ===============================\r",
									"let books;\r",
									"let isJsonValid = true;\r",
									"\r",
									"try {\r",
									"    books = pm.response.json();\r",
									"} catch (e) {\r",
									"    isJsonValid = false;\r",
									"    console.error(\"JSON không hợp lệ:\", e);\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// TEST CHUNG: STATUS CODE, HEADERS, TIME\r",
									"// ===============================\r",
									"const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"const url = pm.request.url.toString();\r",
									"\r",
									"pm.test(`Status code là ${statusCode}`, () => {\r",
									"    pm.expect([200, 400, 401, 403, 404, 500]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type là application/json\", () => {\r",
									"    pm.expect(contentType).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// LOGIC KHI STATUS = 200\r",
									"// ===============================\r",
									"if (isJsonValid && Array.isArray(books) && statusCode === 200) {\r",
									"    pm.test(\"Phản hồi là mảng danh sách sách\", () => {\r",
									"        pm.expect(books).to.be.an(\"array\");\r",
									"    });\r",
									"\r",
									"    if (books.length > 0) {\r",
									"        let missingPrice = false;\r",
									"\r",
									"        books.forEach((book, index) => {\r",
									"            const prefix = `Sách #${index + 1}`;\r",
									"\r",
									"            pm.test(`${prefix} – Có đầy đủ trường dữ liệu`, () => {\r",
									"                const requiredFields = [\r",
									"                    \"id\", \"title\", \"author\", \"price\",\r",
									"                    \"category\", \"stock\", \"rating\", \"publishedYear\", \"status\"\r",
									"                ];\r",
									"                const bookKeys = Object.keys(book);\r",
									"                const missing = requiredFields.filter(field => !bookKeys.includes(field));\r",
									"                if (missing.length > 0) {\r",
									"                    pm.expect.fail(`${prefix} thiếu các trường: ${missing.join(\", \")}`);\r",
									"                }\r",
									"            });\r",
									"\r",
									"            pm.test(`${prefix} – Kiểu dữ liệu và giá trị hợp lệ`, () => {\r",
									"                try {\r",
									"                    pm.expect(book.id).to.be.a(\"string\");\r",
									"                    pm.expect(book.title).to.be.a(\"string\");\r",
									"                    pm.expect(book.author).to.be.a(\"string\");\r",
									"                    pm.expect(book.price).to.be.a(\"number\").and.to.be.at.least(0);\r",
									"                    pm.expect(book.category).to.be.a(\"string\");\r",
									"                    pm.expect(book.stock).to.be.a(\"number\").and.to.be.at.least(0);\r",
									"                    pm.expect(book.rating).to.be.a(\"number\").and.to.be.within(1, 5);\r",
									"                    pm.expect(book.publishedYear).to.be.a(\"number\").and.to.be.at.most(new Date().getFullYear());\r",
									"                    pm.expect([\"available\", \"out_of_stock\"]).to.include(book.status.toLowerCase());\r",
									"                } catch (e) {\r",
									"                    pm.expect.fail(`${prefix} có lỗi dữ liệu: ${e.message}`);\r",
									"                }\r",
									"            });\r",
									"\r",
									"            // Đánh dấu nếu thiếu giá để không test sort\r",
									"            if (typeof book.price !== \"number\") {\r",
									"                missingPrice = true;\r",
									"            }\r",
									"        });\r",
									"\r",
									"        // Nếu có query sort=price, kiểm tra sắp xếp đúng\r",
									"        if (!missingPrice && books.length > 1 && url.includes(\"sort=price\")) {\r",
									"            pm.test(\"Danh sách được sắp xếp theo giá tăng dần\", () => {\r",
									"                const isSorted = books.every((b, i, arr) => i === 0 || arr[i - 1].price <= b.price);\r",
									"                pm.expect(isSorted).to.be.true;\r",
									"            });\r",
									"        } else if (missingPrice && url.includes(\"sort=price\")) {\r",
									"            pm.test(\"Không thể kiểm tra sort vì có sách thiếu 'price'\", () => {\r",
									"                pm.expect.fail(\"Có ít nhất một sách thiếu trường 'price'\");\r",
									"            });\r",
									"        }\r",
									"\r",
									"    } else {\r",
									"        pm.test(\"Danh sách rỗng – không có sách\", () => {\r",
									"            pm.expect(books.length).to.eql(0);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"// XỬ LÝ LỖI KHÁC\r",
									"// ===============================\r",
									"\r",
									"// Nếu có tham số sort nhưng không hợp lệ\r",
									"const validSortFields = [\"price\", \"rating\", \"publishedYear\"];\r",
									"if (url.includes(\"sort=\")) {\r",
									"    const sortParam = url.split(\"sort=\")[1].split(\"&\")[0];\r",
									"    if (!validSortFields.includes(sortParam)) {\r",
									"        pm.test(\"Tham số sort không hợp lệ – nên trả 400\", () => {\r",
									"            pm.expect(statusCode).to.eql(400);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"// 400 - Lỗi truy vấn\r",
									"if (statusCode === 400) {\r",
									"    const msg = (books?.message || \"\").toLowerCase();\r",
									"    pm.test(\"Lỗi truy vấn không hợp lệ (400)\", () => {\r",
									"        pm.expect(msg).to.match(/invalid|lỗi|không hợp lệ|tham số/i);\r",
									"    });\r",
									"}\r",
									"\r",
									"// 401 - Chưa xác thực\r",
									"if (statusCode === 401) {\r",
									"    const msg = (books?.message || \"\").toLowerCase();\r",
									"    pm.test(\"Chưa xác thực hoặc không có quyền\", () => {\r",
									"        pm.expect(msg).to.include(\"xác thực\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"401 - Cảnh báo cần kiểm tra token\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// 403 - Không có quyền\r",
									"if (statusCode === 403) {\r",
									"    const msg = (books?.message || \"\").toLowerCase();\r",
									"    pm.test(\"Không có quyền truy cập (403)\", () => {\r",
									"        pm.expect(msg).to.include(\"không có quyền\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// 404 - Không tìm thấy tài nguyên\r",
									"if (statusCode === 404) {\r",
									"    const msg = (books?.message || \"\").toLowerCase();\r",
									"    pm.test(\"Không tìm thấy tài nguyên (404)\", () => {\r",
									"        pm.expect(msg).to.include(\"không tồn tại\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// 500 - Lỗi phía server\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"500 - Lỗi phía server\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Có lỗi phía backend (logic hoặc server)\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books?sort=price",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "sort",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;\r",
									"console.log(`Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"// Xác định token nghi ngờ không hợp lệ\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"// Token được phép test giả lập\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"// Cảnh báo nếu token sai nhưng vẫn trả về 200\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Kiểm tra định dạng Authorization\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA PHẢN HỒI JSON\r",
									"// ===============================\r",
									"let body;\r",
									"let isJson = true;\r",
									"\r",
									"try {\r",
									"    body = pm.response.json();\r",
									"} catch (err) {\r",
									"    isJson = false;\r",
									"    console.error(\"Không thể parse JSON:\", err);\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// TEST CHUNG: STATUS CODE, TIME, HEADERS\r",
									"// ===============================\r",
									"pm.test(`Mã trạng thái là ${statusCode}`, () => {\r",
									"    pm.expect([200, 400, 403, 404, 401, 500]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Thời gian phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type là application/json\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    pm.expect(contentType).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA LOGIC KHI STATUS = 200\r",
									"// ===============================\r",
									"const bookId = pm.request.url.variables.get(\"bookId\") || pm.request.url.toString().split('/').pop();\r",
									"\r",
									"if (statusCode === 200 && isJson && typeof body === 'object') {\r",
									"    // Kiểm tra dữ liệu đầy đủ\r",
									"    pm.test(\"Phản hồi chứa đầy đủ trường sách\", () => {\r",
									"        const requiredFields = [\r",
									"            \"id\", \"title\", \"author\", \"price\", \"category\",\r",
									"            \"stock\", \"rating\", \"publishedYear\", \"status\"\r",
									"        ];\r",
									"        requiredFields.forEach(field => {\r",
									"            pm.expect(body).to.have.property(field, undefined, `Thiếu trường '${field}'`);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    // Kiểm tra logic sau khi xóa\r",
									"    pm.test(\"Trường 'status' sau khi xóa là 'out_of_stock'\", () => {\r",
									"        pm.expect(body).to.have.property(\"status\");\r",
									"        pm.expect(body.status).to.eql(\"out_of_stock\");\r",
									"    });\r",
									"\r",
									"    console.log(\"Sách đã xóa:\", body);\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// XỬ LÝ CÁC TRƯỜNG HỢP LỖI KHÁC\r",
									"// ===============================\r",
									"\r",
									"// 400 - Lỗi đầu vào\r",
									"if (statusCode === 400 && isJson) {\r",
									"    const msg = (body.message || \"\").toLowerCase();\r",
									"\r",
									"    if (/không đúng định dạng|phải là số/.test(msg)) {\r",
									"        pm.test(\"bookId không hợp lệ (400)\", () => {\r",
									"            pm.expect(msg).to.match(/không đúng định dạng|phải là số/i);\r",
									"        });\r",
									"    } else if (msg.includes(\"out_of_stock\")) {\r",
									"        pm.test(\"Sách đã out_of_stock trước đó (400)\", () => {\r",
									"            pm.expect(msg).to.include(\"out_of_stock\");\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"Lỗi 400 không xác định nội dung\", () => {\r",
									"            pm.expect.fail(`Thông báo không rõ ràng: ${body.message}`);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"// 404 - Không tìm thấy sách\r",
									"else if (statusCode === 404 && isJson) {\r",
									"    const msg = (body.message || \"\").toLowerCase();\r",
									"\r",
									"    if (msg.includes(\"thiếu id\")) {\r",
									"        pm.test(\"Thiếu bookId trong URL (404)\", () => {\r",
									"            pm.expect(body.message).to.eql(\"Thiếu ID trong URL. Ví dụ đúng: /books/1\");\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"Không tìm thấy sách (404)\", () => {\r",
									"            pm.expect(msg).to.include(\"không tìm thấy\");\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"// 403 - Không có quyền xóa\r",
									"else if (statusCode === 403 && isJson) {\r",
									"    const msg = (body.message || \"\").toLowerCase();\r",
									"\r",
									"    pm.test(\"Người dùng không có quyền xóa sách (403)\", () => {\r",
									"        pm.expect(msg).to.match(/không có quyền.*xóa sách/i);\r",
									"    });\r",
									"\r",
									"    // Kiểm tra theo role từ môi trường\r",
									"    const currentUserRole = pm.environment.get(\"currentUserRole\") || \"user\";\r",
									"    if (currentUserRole === \"user\") {\r",
									"        pm.test(\"Người dùng thường bị từ chối quyền xóa sách\", () => {\r",
									"            pm.expect(statusCode).to.eql(403);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"// Truyền bookId null hoặc rỗng\r",
									"else if (isJson && (!bookId || bookId === \"null\" || bookId === \"\")) {\r",
									"    pm.test(\"Không truyền hoặc truyền bookId null/rỗng\", () => {\r",
									"        pm.expect.fail(\"Không truyền hoặc truyền bookId null/rỗng trong URL.\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// 401 - Chưa xác thực\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// 500 - Lỗi server\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"500 - Lỗi phía server\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Có lỗi phía backend (logic hoặc server)\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// Trường hợp không xác định khác\r",
									"else if (![200, 400, 403, 404, 401, 500].includes(statusCode)) {\r",
									"    pm.test(\"Phản hồi lỗi không xác định\", () => {\r",
									"        pm.expect(isJson).to.be.true;\r",
									"        console.warn(\"Nội dung phản hồi không xác định:\", body);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// //Id sách không tồn tại\r",
									"// pm.environment.set(\"bookId\", \"999\"); \r",
									"// // Id sách hợp lệ\r",
									"// pm.environment.set(\"bookId\", \"50\"); \r",
									"// // Id sách không đúng định dạng\r",
									"// pm.environment.set(\"bookId\", \"@\"); \r",
									"// // Id sách không phải là số\r",
									"// pm.environment.set(\"bookId\", \"abc\");\r",
									"// // Id sách không phải là số nguyên\r",
									"// pm.environment.set(\"bookId\", \"-1\");\r",
									"// // Id sách null\r",
									"// pm.environment.set(\"bookId\", \"null\");\r",
									"// // Id sách rỗng\r",
									"// pm.environment.set(\"bookId\", \"\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						},
						"description": "Xoá một cuốn sách khỏi hệ thống theo id.  \nĐây là thao tác “Delete” trong CRUD.  \nSau khi xoá, có thể kiểm tra lại bằng Get all books để xác nhận."
					},
					"response": []
				},
				{
					"name": "Search books",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//================TITLE====================//\r",
									"// //Kiểm tra titleName với titletitle,authorName,price,categoryName,stock,rating,publishedYear,statusName  = null\r",
									"// pm.environment.set('titleName','null');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra titleName với title,authorName,price,categoryName,stock,rating,publishedYear,statusName = rỗng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"//Kiểm tra với titleName đúng\r",
									"// pm.environment.set('titleName','Mắc biếc');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"//Kiểm tra với titleName phân biệt hoa thường\r",
									"// pm.environment.set('titleName','mắc biếc');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với titleName bằng kí tự đặc biệt\r",
									"// pm.environment.set('titleName','@');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với titleName sai định dạng\r",
									"// pm.environment.set('titleName','123');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"\r",
									"\r",
									"//================AUTHOR====================//\r",
									"// //Kiểm tra titleName với titletitle,authorName,price,categoryName,stock,rating,publishedYear,statusName  = null\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','null');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra titleName với title,authorName,price,categoryName,stock,rating,publishedYear,statusName = rỗng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với authorName đúng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','Nguyễn Nhật Ánh');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với authorName phân biệt hoa thường\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','Nguyễn NHẬT Ánh');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với authorName bằng kí tự đặc biệt\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','@');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với authorName sai định dạng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','123');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"\r",
									"\r",
									"\r",
									"//================PRICE====================//\r",
									"// //Kiểm tra titleName với titletitle,authorName,price,categoryName,stock,rating,publishedYear,statusName  = null\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','null');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra titleName với title,authorName,price,categoryName,stock,rating,publishedYear,statusName = rỗng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với price đúng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','95000');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với price bằng kí tự đặc biệt\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','@');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với price sai định dạng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','abc');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với price là số âm\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','-95000');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"\r",
									"\r",
									"\r",
									"//================CATEGORY====================//\r",
									"// //Kiểm tra titleName với titletitle,authorName,price,categoryName,stock,rating,publishedYear,statusName  = null\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','null');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra titleName với title,authorName,price,categoryName,stock,rating,publishedYear,statusName = rỗng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với categoryName đúng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','Tiểu thuyết');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với categoryName phân biệt hoa thường\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','TIỂU THUYẾT');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với categoryName bằng kí tự đặc biệt\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','@');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với categoryName sai định dạng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','123');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"\r",
									"\r",
									"//================STOCK====================//\r",
									"// //Kiểm tra titleName với titletitle,authorName,price,categoryName,stock,rating,publishedYear,statusName  = null\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','null');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra titleName với title,authorName,price,categoryName,stock,rating,publishedYear,statusName = rỗng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với stock đúng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','4');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với stock bằng kí tự đặc biệt\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','@');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với stock sai định dạng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','abc');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với stock là số âm\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','-9');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"\r",
									"\r",
									"//================PUBLISHEDYEAR====================//\r",
									"// //Kiểm tra titleName với titletitle,authorName,price,categoryName,stock,rating,publishedYear,statusName  = null\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','null');\r",
									"// //Kiểm tra titleName với title,authorName,price,categoryName,stock,rating,publishedYear,statusName = rỗng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với publishedYear đúng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','2025');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với publishedYear bằng kí tự đặc biệt\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','@');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với publishedYear sai định dạng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','abc');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với publishedYear là số âm\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','-2025');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với publishedYear bé hơn năm hiện tại\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','9999');\r",
									"// pm.environment.set('statusName','');\r",
									"\r",
									"//================STATUS====================//\r",
									"// //Kiểm tra titleName với titletitle,authorName,price,categoryName,stock,rating,publishedYear,statusName  = null\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','null');\r",
									"// //Kiểm tra titleName với title,authorName,price,categoryName,stock,rating,publishedYear,statusName = rỗng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với statusName đúng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','available');\r",
									"// //Kiểm tra với statusName phân biệt hoa thường\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','AVAILABLE');\r",
									"// //Kiểm tra với statusName bằng kí tự đặc biệt\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','@');\r",
									"// //Kiểm tra với statusName sai định dạng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','123');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;\r",
									"console.log(`Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"// ===============================\r",
									"//  KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA PHẢN HỒI JSON\r",
									"// ===============================\r",
									"let resData;\r",
									"let isJson = false;\r",
									"try {\r",
									"    resData = pm.response.json();\r",
									"    isJson = true;\r",
									"} catch (e) {\r",
									"    console.error(\"Không thể parse JSON:\", e);\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// TEST CHUNG: STATUS CODE, TIME, CONTENT-TYPE\r",
									"// ===============================\r",
									"pm.test(\"Mã trạng thái hợp lệ\", () => {\r",
									"    pm.expect([200, 400, 403, 404, 500, 401]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Thời gian phản hồi < 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type là application/json\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    pm.expect(contentType).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA LOGIC KHI STATUS = 200\r",
									"// ===============================\r",
									"const stringFields = [\"title\", \"author\", \"category\", \"status\"];\r",
									"const numberFields = [\"price\", \"stock\", \"rating\", \"publishedYear\"];\r",
									"\r",
									"// Lấy giá trị từ biến môi trường\r",
									"const envValues = {};\r",
									"[...stringFields, ...numberFields].forEach(field => {\r",
									"    const rawDirect = pm.environment.get(field);\r",
									"    const rawNamed = pm.environment.get(field + \"Name\");\r",
									"    const raw = rawNamed ?? rawDirect;\r",
									"\r",
									"    if (![\"\", \"null\", null, undefined].includes(raw)) {\r",
									"        envValues[field] = raw.trim();\r",
									"    }\r",
									"});\r",
									"\r",
									"// Hàm xác định giá trị không hợp lệ\r",
									"const isInvalidInput = (field, value) => {\r",
									"    const isInvalidNumber = numberFields.includes(field) && isNaN(Number(value));\r",
									"    const isEmptyOrNull = value === \"\" || value.toLowerCase() === \"null\";\r",
									"    const isSpecialChar = /^[\\W_]+$/.test(value);\r",
									"    const isNegative = numberFields.includes(field) && Number(value) < 0;\r",
									"    const isFutureYear = field === \"publishedYear\" && Number(value) > new Date().getFullYear();\r",
									"    const isOnlyDigits = stringFields.includes(field) && /^\\d+$/.test(value);\r",
									"    return isInvalidNumber || isEmptyOrNull || isSpecialChar || isNegative || isFutureYear || isOnlyDigits;\r",
									"};\r",
									"\r",
									"// Nếu trả về 200 và có mảng kết quả\r",
									"if (statusCode === 200 && isJson && Array.isArray(resData)) {\r",
									"    pm.test(\"Phản hồi là mảng hợp lệ\", () => {\r",
									"        pm.expect(Array.isArray(resData)).to.be.true;\r",
									"    });\r",
									"\r",
									"    let foundInvalid = false;\r",
									"\r",
									"    // Nếu có input sai mà vẫn trả 200 là lỗi\r",
									"    Object.entries(envValues).forEach(([field, value]) => {\r",
									"        if (isInvalidInput(field, value)) {\r",
									"            foundInvalid = true;\r",
									"            pm.test(`BUG: '${field}' sai định dạng nhưng vẫn trả về 200`, () => {\r",
									"                pm.expect.fail(`'${field}' = '${value}' không hợp lệ nhưng API vẫn trả về 200`);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"\r",
									"    if (!foundInvalid && resData.length > 0) {\r",
									"        const book = resData[0];\r",
									"\r",
									"        // So sánh dữ liệu trả về khớp với giá trị tìm kiếm\r",
									"        Object.entries(envValues).forEach(([field, value]) => {\r",
									"            pm.test(`Dữ liệu trả về khớp '${field}'`, () => {\r",
									"                const actual = book[field];\r",
									"                if (stringFields.includes(field)) {\r",
									"                    pm.expect(actual.toLowerCase()).to.include(value.toLowerCase());\r",
									"                } else {\r",
									"                    pm.expect(actual).to.eql(Number(value));\r",
									"                }\r",
									"            });\r",
									"        });\r",
									"    } else if (!foundInvalid && resData.length === 0) {\r",
									"        // Gợi ý nếu có thể do phân biệt hoa thường\r",
									"        Object.entries(envValues).forEach(([field, value]) => {\r",
									"            if (stringFields.includes(field)) {\r",
									"                const hasLower = /[a-zà-ỹ]/.test(value);\r",
									"                const hasUpper = /[A-ZÀ-Ỹ]/.test(value);\r",
									"                const isLikelyCased = hasLower && hasUpper;\r",
									"\r",
									"                if (isLikelyCased) {\r",
									"                    pm.test(`Có thể phân biệt HOA - thường ở '${field}'`, () => {\r",
									"                        pm.expect.fail(`Phân biệt HOA - thường với '${value}'`);\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        });\r",
									"\r",
									"        pm.test(\"Không có kết quả nào (mảng rỗng)\", () => {\r",
									"            pm.expect(resData.length).to.eql(0);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// XỬ LÝ CÁC MÃ LỖI KHÁC\r",
									"// ===============================\r",
									"if (statusCode === 400 && isJson) {\r",
									"    const msg = (resData.message || \"\").toLowerCase();\r",
									"\r",
									"    pm.test(\"400 - Lỗi input không hợp lệ\", () => {\r",
									"        pm.expect(msg.length).to.be.above(0);\r",
									"    });\r",
									"\r",
									"    Object.entries(envValues).forEach(([field, value]) => {\r",
									"        if (isInvalidInput(field, value)) {\r",
									"            pm.test(`'${field}' sai định dạng, trả về 400 hợp lý`, () => {\r",
									"                pm.expect(statusCode).to.eql(400);\r",
									"                if (msg.includes(field.toLowerCase())) {\r",
									"                    pm.expect(msg).to.include(field.toLowerCase());\r",
									"                } else {\r",
									"                    console.warn(`Message không chứa tên field '${field}'`);\r",
									"                }\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 403 && isJson) {\r",
									"    const msg = (resData.message || \"\").toLowerCase();\r",
									"    pm.test(\"403 - Không có quyền truy cập\", () => {\r",
									"        pm.expect(msg).to.include(\"không có quyền\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 404 && isJson) {\r",
									"    const msg = (resData.message || \"\").toLowerCase();\r",
									"    pm.test(\"404 - Không tìm thấy dữ liệu\", () => {\r",
									"        pm.expect(msg).to.include(\"không tìm thấy\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 500 && isJson) {\r",
									"    const msg = (resData.message || \"\").toLowerCase();\r",
									"    pm.test(\"500 - Lỗi server\", () => {\r",
									"        pm.expect(msg).to.include(\"lỗi\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books?status={{statusName}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "status",
									"value": "{{statusName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get book by rating",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// //================RATING====================//\r",
									"// //Kiểm tra titleName với titletitle,authorName,price,categoryName,stock,rating,publishedYear,statusName  = null\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','null');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra titleName với title,authorName,price,categoryName,stock,rating,publishedYear,statusName = rỗng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"//Kiểm tra với rating đúng\r",
									"pm.environment.set('titleName','');\r",
									"pm.environment.set('authorName','');\r",
									"pm.environment.set('price','');\r",
									"pm.environment.set('categoryName','');\r",
									"pm.environment.set('stock','');\r",
									"pm.environment.set('rating','4');\r",
									"pm.environment.set('publishedYear','');\r",
									"pm.environment.set('statusName','');\r",
									"// //Kiểm tra với rating bằng kí tự đặc biệt\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','@');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với rating sai định dạng\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','abc');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"//Kiểm tra với rating là số âm\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','');\r",
									"// pm.environment.set('rating','-1');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"//Kiểm tra với rating bé hơn 1\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','0');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');\r",
									"// //Kiểm tra với rating lớn hơn 5\r",
									"// pm.environment.set('titleName','');\r",
									"// pm.environment.set('authorName','');\r",
									"// pm.environment.set('price','');\r",
									"// pm.environment.set('categoryName','');\r",
									"// pm.environment.set('stock','6');\r",
									"// pm.environment.set('rating','');\r",
									"// pm.environment.set('publishedYear','');\r",
									"// pm.environment.set('statusName','');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;\r",
									"console.log(`Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"\r",
									"// ===============================\r",
									"//  PARSE JSON PHẢN HỒI\r",
									"// ===============================\r",
									"let resData = {};\r",
									"let isJson = false;\r",
									"try {\r",
									"    resData = pm.response.json();\r",
									"    isJson = true;\r",
									"} catch (e) {\r",
									"    console.warn(\"Không parse được JSON từ response.\");\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// TEST CHUNG: STATUS CODE, TIME, CONTENT-TYPE\r",
									"// ===============================\r",
									"pm.test(\"Mã trạng thái hợp lệ\", () => {\r",
									"    pm.expect([200, 400, 404, 500, 401]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Thời gian phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type là application/json\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    pm.expect(contentType).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA LOGIC KHI STATUS = 200\r",
									"// ===============================\r",
									"const ratingRaw = pm.environment.get(\"rating\");\r",
									"const ratingNumber = Number(ratingRaw);\r",
									"\r",
									"const isValidRating =\r",
									"    ratingRaw !== undefined &&\r",
									"    ratingRaw !== null &&\r",
									"    ratingRaw !== \"\" &&\r",
									"    !isNaN(ratingNumber) &&\r",
									"    ratingNumber >= 1 &&\r",
									"    ratingNumber <= 5;\r",
									"\r",
									"const explain = `Giá trị rating đang test: '${ratingRaw}'`;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    pm.test(\"200 - Rating hợp lệ (1–5)\", () => {\r",
									"        pm.expect(isValidRating, `rating không hợp lệ nhưng vẫn trả về 200. ${explain}`).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"// XỬ LÝ LỖI: 400, 401, 500\r",
									"// ===============================\r",
									"if (statusCode === 400) {\r",
									"    pm.test(\"400 - Rating không hợp lệ\", () => {\r",
									"        pm.expect(!isValidRating, `rating hợp lệ nhưng lại trả về 400. ${explain}`).to.be.true;\r",
									"    });\r",
									"\r",
									"    if (isJson && resData.message) {\r",
									"        pm.test(\"Message lỗi chứa 'không hợp lệ'\", () => {\r",
									"            pm.expect(resData.message.toLowerCase()).to.include(\"không hợp lệ\");\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"500 - Lỗi phía server\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Có lỗi phía backend (logic hoặc server)\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books?rating={{rating}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "rating",
									"value": "{{rating}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;\r",
									"console.log(`Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"\r",
									"// ======================================\r",
									"// KIỂM TRA AUTHORIZATION\r",
									"// ======================================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"\r",
									"// ======================================\r",
									"// PARSE PHẢN HỒI JSON\r",
									"// ======================================\r",
									"let response = {};\r",
									"let isJsonValid = true;\r",
									"\r",
									"try {\r",
									"    response = pm.response.json();\r",
									"} catch (e) {\r",
									"    isJsonValid = false;\r",
									"    console.warn(\"Không parse được JSON:\", e);\r",
									"    pm.environment.set(\"inforMessage\", \"Phản hồi không phải JSON hợp lệ.\");\r",
									"}\r",
									"\r",
									"\r",
									"// ======================================\r",
									"// TEST CHUNG (status code, time, content-type)\r",
									"// ======================================\r",
									"pm.test(\"Mã trạng thái hợp lệ\", () => {\r",
									"    pm.expect([200, 400, 401, 403, 404, 500]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Thời gian phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type là application/json\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    pm.expect(contentType).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"// ======================================\r",
									"// LOGIC KHI STATUS = 200 (Lấy danh sách user)\r",
									"// ======================================\r",
									"if (statusCode === 200 && Array.isArray(response)) {\r",
									"    pm.test(\"200 - Response là mảng\", () => {\r",
									"        pm.expect(Array.isArray(response)).to.be.true;\r",
									"    });\r",
									"\r",
									"    pm.test(\"200 - Có ít nhất 1 user\", () => {\r",
									"        pm.expect(response.length).to.be.above(0);\r",
									"    });\r",
									"\r",
									"    response.forEach((user, index) => {\r",
									"        const fields = {\r",
									"            id: \"string\",\r",
									"            username: \"string\",\r",
									"            password: \"string\",\r",
									"            role: [\"admin\", \"user\"],\r",
									"            email: \"string\",\r",
									"            address: \"string\",\r",
									"            status: \"string\",\r",
									"            fullName: \"string\"\r",
									"        };\r",
									"\r",
									"        for (const field in fields) {\r",
									"            const actualField = user.hasOwnProperty(field)\r",
									"                ? field\r",
									"                : (user.hasOwnProperty(field.toLowerCase()) ? field.toLowerCase() : null);\r",
									"\r",
									"            pm.test(`User ${index + 1} có trường '${field}'`, () => {\r",
									"                pm.expect(actualField, `Thiếu trường '${field}'`).to.not.be.null;\r",
									"            });\r",
									"\r",
									"            if (actualField) {\r",
									"                const value = user[actualField];\r",
									"\r",
									"                if (typeof fields[field] === \"string\") {\r",
									"                    pm.test(`'${field}' là kiểu ${fields[field]}`, () => {\r",
									"                        pm.expect(value).to.be.a(fields[field]);\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (Array.isArray(fields[field])) {\r",
									"                    pm.test(`'role' hợp lệ`, () => {\r",
									"                        pm.expect(fields[field]).to.include(value);\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (field === \"email\") {\r",
									"                    pm.test(\"Email hợp lệ\", () => {\r",
									"                        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"                        pm.expect(emailRegex.test(value)).to.be.true;\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"\r",
									"    // Lưu userId vào môi trường\r",
									"    pm.environment.set(\"userId\", response[0].id);\r",
									"    console.log(\"Đã lưu userId:\", response[0].id);\r",
									"}\r",
									"\r",
									"\r",
									"// ======================================\r",
									"// XỬ LÝ LỖI KHÁC\r",
									"// ======================================\r",
									"else if (statusCode === 400) {\r",
									"    const msg = (response.message || \"\").toLowerCase();\r",
									"    pm.test(\"400 - Thông báo lỗi hợp lệ\", () => {\r",
									"        pm.expect(msg).to.have.length.above(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"else if (statusCode === 401) {\r",
									"    const msg = (response.message || \"\").toLowerCase();\r",
									"    pm.test(\"401 - Chưa xác thực\", () => {\r",
									"        pm.expect(msg).to.include(\"unauthorized\").or.include(\"không có quyền\");\r",
									"    });\r",
									"}\r",
									"\r",
									"else if (statusCode === 403) {\r",
									"    const msg = (response.message || \"\").trim();\r",
									"    pm.test(\"403 - Có thông báo lỗi\", () => {\r",
									"        pm.expect(msg.length).to.be.above(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"else if (statusCode === 404) {\r",
									"    const msg = (response.message || \"\").toLowerCase();\r",
									"    pm.test(\"404 - Không tìm thấy\", () => {\r",
									"        pm.expect(msg).to.include(\"not found\").or.include(\"không tìm thấy\");\r",
									"    });\r",
									"}\r",
									"\r",
									"else if (statusCode === 500) {\r",
									"    pm.test(\"500 - Lỗi phía server\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Có lỗi phía backend (logic hoặc server)\");\r",
									"    });\r",
									"}\r",
									"\r",
									"else {\r",
									"    pm.test(\"Trạng thái chưa được xử lý rõ\", () => {\r",
									"        pm.expect.fail(`Chưa có test case cụ thể cho status ${statusCode}`);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// // Nếu chưa có thì set token mặc định\r",
									"// if (!pm.environment.get(\"admin_token\")) {\r",
									"//     pm.environment.set(\"admin_token\", \"fake-admin-token-999\");\r",
									"// }\r",
									"\r",
									"// // Gán Authorization header\r",
									"// pm.request.headers.upsert({\r",
									"//     key: \"Authorization\",\r",
									"//     value: `Bearer ${pm.environment.get(\"admin_token\")}`\r",
									"// });\r",
									"\r",
									"// // Gán Content-Type nếu chưa có\r",
									"// pm.request.headers.upsert({\r",
									"//     key: \"Content-Type\",\r",
									"//     value: \"application/json\"\r",
									"// });\r",
									"\r",
									"//====================USER================//\r",
									"//Kiểm tra đăng nhập bằng user\r",
									"// Nếu chưa có thì set token mặc định\r",
									"if (!pm.environment.get(\"user_token\")) {\r",
									"    pm.environment.set(\"user_token\", \"fake-user-token-123\");\r",
									"}\r",
									"\r",
									"// Gán Authorization header\r",
									"pm.request.headers.upsert({\r",
									"    key: \"Authorization\",\r",
									"    value: `Bearer ${pm.environment.get(\"user_token\")}`\r",
									"});\r",
									"\r",
									"// Gán Content-Type nếu chưa có\r",
									"pm.request.headers.upsert({\r",
									"    key: \"Content-Type\",\r",
									"    value: \"application/json\"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;\r",
									"console.log(`Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"\r",
									"// ======================================\r",
									"// KIỂM TRA AUTHORIZATION\r",
									"// ======================================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"\r",
									"// ======================================\r",
									"//  PARSE PHẢN HỒI JSON\r",
									"// ======================================\r",
									"let json = {};\r",
									"let isJson = true;\r",
									"\r",
									"try {\r",
									"    json = pm.response.json();\r",
									"} catch (err) {\r",
									"    isJson = false;\r",
									"    console.warn(\"Không parse được JSON:\", err);\r",
									"}\r",
									"\r",
									"\r",
									"// ======================================\r",
									"//  TEST CHUNG: STATUS CODE, TIME, CONTENT-TYPE\r",
									"// ======================================\r",
									"const userId = pm.request.url.variables.get(\"userId\") || pm.request.url.toString().split('/').pop();\r",
									"console.log(`Đang test với userId = '${userId}'`);\r",
									"console.log(`Status code: ${statusCode}`);\r",
									"console.log(`Thời gian phản hồi: ${pm.response.responseTime}ms`);\r",
									"\r",
									"pm.test(\"Mã trạng thái hợp lệ\", () => {\r",
									"    pm.expect([200, 400, 401, 403, 404, 500]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type là JSON\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    pm.expect(contentType).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"// ======================================\r",
									"//  XỬ LÝ THEO STATUS CODE\r",
									"// ======================================\r",
									"\r",
									"// === 200 OK ===\r",
									"if (statusCode === 200 && isJson) {\r",
									"    pm.test(\"200 - Dữ liệu trả về có field 'id'\", () => {\r",
									"        pm.expect(json).to.have.property(\"id\");\r",
									"        pm.expect(json.id).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// === 400 Bad Request ===\r",
									"else if (statusCode === 400 && isJson) {\r",
									"    const msg = (json.message || \"\").trim();\r",
									"    pm.test(\"400 - Request không hợp lệ có message\", () => {\r",
									"        pm.expect(msg.length).to.be.above(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"// === 403 Forbidden ===\r",
									"else if (statusCode === 403 && isJson) {\r",
									"    const msg = (json.message || \"\").trim();\r",
									"    pm.test(\"403 - Không có quyền truy cập\", () => {\r",
									"        pm.expect(msg.length).to.be.above(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"// === 404 Not Found ===\r",
									"else if (statusCode === 404 && isJson) {\r",
									"    const msg = (json.message || \"\").trim();\r",
									"    pm.test(\"404 - Không tìm thấy userId\", () => {\r",
									"        pm.expect(msg.length).to.be.above(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"// === 401 Unauthorized ===\r",
									"else if (statusCode === 401) {\r",
									"    pm.test(\"401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// === 500 Internal Server Error ===\r",
									"else if (statusCode === 500) {\r",
									"    pm.test(\"500 - Lỗi phía server\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Có lỗi phía backend (logic hoặc server)\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// === Trạng thái khác chưa rõ ràng ===\r",
									"else {\r",
									"    pm.test(\"Status code chưa được kiểm soát\", () => {\r",
									"        pm.expect.fail(`Chưa xử lý rõ ràng với status ${statusCode}`);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// //Kiểm tra userId đúng\r",
									"// pm.environment.set(\"userId\", \"1\");\r",
									"// //Kiểm tra userId null\r",
									"//pm.environment.set(\"userId\", \"null\");\r",
									"// //Kiểm tra userId rỗng\r",
									"//pm.environment.set(\"userId\", \"\");\r",
									"// //Kiểm tra userId không tông tại\r",
									"//pm.environment.set(\"userId\", \"999\");\r",
									"// //Kiểm tra userId sai định dạng\r",
									"//pm.environment.set(\"userId\", \"abc\");\r",
									"// //Kiểm tra userId giá trị âm\r",
									"// pm.environment.set(\"userId\", \"-1\");\r",
									"// //Kiểm tra userId ký tự đặc biệt\r",
									"//pm.environment.set(\"userId\", \"@\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;\r",
									"console.log(`Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"\r",
									"// ======================================\r",
									"// KIỂM TRA AUTHORIZATION\r",
									"// ======================================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"\r",
									"// ======================================\r",
									"//  PARSE PHẢN HỒI JSON AN TOÀN\r",
									"// ======================================\r",
									"let resJson = {};\r",
									"let isJson = true;\r",
									"\r",
									"try {\r",
									"    resJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    isJson = false;\r",
									"    console.error(\"Không parse được JSON từ response:\", e);\r",
									"    pm.environment.set(\"inforMessage\", \"Phản hồi không phải JSON.\");\r",
									"}\r",
									"\r",
									"if (!isJson) return;\r",
									"\r",
									"// Chuyển keys thành chữ thường để xử lý không phân biệt HOA-thường\r",
									"const user = {};\r",
									"for (const key in resJson) {\r",
									"    user[key.toLowerCase()] = resJson[key];\r",
									"}\r",
									"\r",
									"\r",
									"// ======================================\r",
									"//  TEST CHUNG: STATUS CODE, TIME, CONTENT-TYPE\r",
									"// ======================================\r",
									"pm.test(`Mã trạng thái là ${statusCode}`, () => {\r",
									"    pm.expect([200, 201, 400, 403, 404, 409]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type là application/json\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
									"    pm.expect(contentType).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"// ======================================\r",
									"//  LOGIC KHI STATUS = 200 HOẶC 201\r",
									"// ======================================\r",
									"if ([200, 201].includes(statusCode)) {\r",
									"    const requiredFields = {\r",
									"        id: \"string\",\r",
									"        username: \"string\",\r",
									"        password: \"string\",\r",
									"        fullname: \"string\",\r",
									"        email: \"string\",\r",
									"        role: \"string\",\r",
									"        address: \"string\",\r",
									"        status: \"string\"\r",
									"    };\r",
									"\r",
									"    pm.test(\"Phản hồi có đầy đủ trường & kiểu đúng\", () => {\r",
									"        for (const field in requiredFields) {\r",
									"            pm.expect(user, `Thiếu trường '${field}'`).to.have.property(field);\r",
									"            pm.expect(user[field], `Trường '${field}' phải là kiểu ${requiredFields[field]}`).to.be.a(requiredFields[field]);\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.test(\"Role phải là 'admin' hoặc 'user'\", () => {\r",
									"        pm.expect(user.role).to.be.oneOf([\"admin\", \"user\"]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Email hợp lệ\", () => {\r",
									"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Status là 'active' hoặc 'unactive'\", () => {\r",
									"        pm.expect(user.status).to.be.oneOf([\"active\", \"unactive\"]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Password đủ mạnh\", () => {\r",
									"        const pass = user.password;\r",
									"        pm.expect(pass.length >= 8, \"Password phải >= 8 ký tự\").to.be.true;\r",
									"        pm.expect(/[!@#$%^&*(),.?\":{}|<>]/.test(pass), \"Password phải có ký tự đặc biệt\").to.be.true;\r",
									"    });\r",
									"\r",
									"    // Lưu userId\r",
									"    if (user.id) {\r",
									"        pm.environment.set(\"userId\", user.id);\r",
									"        console.log(`Đã lưu userId: ${user.id}`);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"// ======================================\r",
									"//  XỬ LÝ LỖI KHÁC\r",
									"// ======================================\r",
									"if ([400, 403, 409].includes(statusCode)) {\r",
									"    const msg = (user.message || \"\").toLowerCase();\r",
									"\r",
									"    pm.test(\"Có thông báo lỗi phù hợp\", () => {\r",
									"        pm.expect(msg).to.not.be.empty;\r",
									"        pm.expect(msg).to.match(/username|password|email|status|role|khoảng trắng|trùng|duplicate|invalid|thiếu|bắt buộc|required/);\r",
									"    });\r",
									"\r",
									"    if (msg.includes(\"username\") && msg.includes(\"trùng\")) {\r",
									"        pm.test(\"Username không được trùng\", () => {\r",
									"            pm.expect(msg).to.include(\"trùng\");\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"500 - Lỗi phía server\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Có lỗi phía backend (logic hoặc server)\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// // Kiểm tra tạo thành công\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"Luan\",\r",
									"//   password: \"Luan1234@@\",\r",
									"//   role: \"user\",\r",
									"//   fullname: \"Nguyễn Luận\",\r",
									"//   email: \"luannguyen@gmail.com\",\r",
									"//   address: \"Hàn Quốc\",\r",
									"//   status: \"active\"\r",
									"// }));\r",
									"\r",
									"// // Kiểm tra username đã tồn tại\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"Cuong\",\r",
									"//   password: \"Cuong1234@\",\r",
									"//   role: \"user\",\r",
									"//   fullname: \"Trần Minh Cường\",\r",
									"//   email: \"cuongtran@gmail.com\",\r",
									"//   address: \"Việt Nam\",\r",
									"//   status: \"active\"\r",
									"// }));\r",
									"\r",
									"// // Kiểm tra tạo thiếu trường username,password,role,fullname,email,address,status\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"Hoa\",\r",
									"//   password: \"Hoa@@abc123\",\r",
									"//   role: \"user\",\r",
									"//   fullname: \"Nguyễn Thị Hoa\",\r",
									"//   email: \"hoanguyen@gmail.com\",\r",
									"//   address: \"Hàn Quốc\",\r",
									"//   status: \"active\"\r",
									"// }));\r",
									"\r",
									"// // Kiểm tra tạo trường username để trống\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"\",\r",
									"//   password: \"Hoa@@abc123\",\r",
									"//   role: \"user\",\r",
									"//   fullname: \"Nguyễn Thị Hoa\",\r",
									"//   email: \"hoanguyen@gmail.com\",\r",
									"//   address: \"Hàn Quốc\",\r",
									"//   status: \"active\"\r",
									"// }));\r",
									"// // Kiểm tra tạo trường password để trống\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"Hoa\",\r",
									"//   password: \"\",\r",
									"//   role: \"user\",\r",
									"//   fullname: \"Nguyễn Thị Hoa\",\r",
									"//   email: \"hoanguyen@gmail.com\",\r",
									"//   address: \"Hàn Quốc\",\r",
									"//   status: \"active\"\r",
									"// }));\r",
									"// // Kiểm tra tạo trường role để trống\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"Hoa\",\r",
									"//   password: \"Hoa@@abc123\",\r",
									"//   role: \"\",\r",
									"//   fullname: \"Nguyễn Thị Hoa\",\r",
									"//   email: \"hoanguyen@gmail.com\",\r",
									"//   address: \"Hàn Quốc\",\r",
									"//   status: \"active\"\r",
									"// }));\r",
									"// // Kiểm tra tạo trường fullname để trống\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"Hoa\",\r",
									"//   password: \"Hoa@@abc123\",\r",
									"//   role: \"user\",\r",
									"//   fullname: \"\",\r",
									"//   email: \"hoanguyen@gmail.com\",\r",
									"//   address: \"Hàn Quốc\",\r",
									"//   status: \"active\"\r",
									"// }));\r",
									"// // Kiểm tra tạo trường email để trống\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"Hoa\",\r",
									"//   password: \"Hoa@@abc123\",\r",
									"//   role: \"user\",\r",
									"//   fullname: \"Nguyễn Thị Hoa\",\r",
									"//   email: \"\",\r",
									"//   address: \"Hàn Quốc\",\r",
									"//   status: \"active\"\r",
									"// }));\r",
									"// // Kiểm tra tạo trường address để trống\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"Hoa\",\r",
									"//   password: \"Hoa@@abc123\",\r",
									"//   role: \"user\",\r",
									"//   fullname: \"Nguyễn Thị Hoa\",\r",
									"//   email: \"hoanguyen@gmail.com\",\r",
									"//   address: \"\",\r",
									"//   status: \"active\"\r",
									"// }));\r",
									"// // Kiểm tra tạo trường status để trống\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"Hoa\",\r",
									"//   password: \"Hoa@@abc123\",\r",
									"//   role: \"user\",\r",
									"//   fullname: \"Nguyễn Thị Hoa\",\r",
									"//   email: \"hoanguyen@gmail.com\",\r",
									"//   address: \"Hàn Quốc\",\r",
									"//   status: \"\"\r",
									"// }));\r",
									"\r",
									"// //Kiểm tra email sai định dạng\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"Hoa\",\r",
									"//   password: \"Hoa@@abc123\",\r",
									"//   role: \"user\",\r",
									"//   fullname: \"Nguyễn Thị Hoa\",\r",
									"//   email: \"hoanguyengmail.com\",\r",
									"//   address: \"Hàn Quốc\",\r",
									"//   status: \"active\"\r",
									"// }));\r",
									"// //Kiểm tra status không phải active hoặc unactive\r",
									"pm.environment.set(\"userBody\", JSON.stringify({\r",
									"  username: \"Hoa\",\r",
									"  password: \"Hoa@@abc123\",\r",
									"  role: \"user\",\r",
									"  fullname: \"Nguyễn Thị Hoa\",\r",
									"  email: \"hoanguyen@gmail.com\",\r",
									"  address: \"Hàn Quốc\",\r",
									"  status: \"Qactive\"\r",
									"}));\r",
									"// //Kiểm tra password thiếu độ dài(ít nhất 8 kí tự)\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"Hoa\",\r",
									"//   password: \"Hoa@\",\r",
									"//   role: \"user\",\r",
									"//   fullname: \"Nguyễn Thị Hoa\",\r",
									"//   email: \"hoanguyen@gmail.com\",\r",
									"//   address: \"Hàn Quốc\",\r",
									"//   status: \"Qactive\"\r",
									"// }));\r",
									"\r",
									"// //Kiểm tra password thiếu kí tự đặc biệt\r",
									"// pm.environment.set(\"userBody\", JSON.stringify({\r",
									"//   username: \"Hoa\",\r",
									"//   password: \"Hoa13hong\",\r",
									"//   role: \"user\",\r",
									"//   fullname: \"Nguyễn Thị Hoa\",\r",
									"//   email: \"hoanguyen@gmail.com\",\r",
									"//   address: \"Hàn Quốc\",\r",
									"//   status: \"Qactive\"\r",
									"// }));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{userBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ===============================\r",
									"//  KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const statusCode = pm.response.code;\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"\r",
									"// ===============================\r",
									"//  PARSE JSON AN TOÀN\r",
									"// ===============================\r",
									"let body = {};\r",
									"let isJson = true;\r",
									"\r",
									"try {\r",
									"    body = pm.response.json();\r",
									"} catch (e) {\r",
									"    isJson = false;\r",
									"    console.warn(\"Không parse được JSON:\", e);\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"//  TEST CHUNG: TIME, STATUS, CONTENT-TYPE\r",
									"// ===============================\r",
									"pm.test(\"Phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(`Mã trạng thái hợp lệ (${statusCode})`, () => {\r",
									"    pm.expect([200, 400, 403, 404, 405]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
									"const isJsonHeader = contentType.includes(\"application/json\");\r",
									"\r",
									"pm.test(\"Content-Type là JSON\", () => {\r",
									"    pm.expect(isJsonHeader).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"// ===============================\r",
									"//  LOGIC KHI STATUS = 200 (XÓA THÀNH CÔNG)\r",
									"// ===============================\r",
									"const userIdRaw = pm.request.url.variables.get(\"userId\") || pm.environment.get(\"userId\");\r",
									"const userId = userIdRaw !== null ? String(userIdRaw).trim() : null;\r",
									"\r",
									"if (statusCode === 200 && isJson) {\r",
									"    pm.test(\"Xoá thành công → 200 OK\", () => {\r",
									"        pm.expect(body).to.have.property(\"id\");\r",
									"        console.log(\"Đã xoá user:\", body.id);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"//  XỬ LÝ LỖI KHÁC\r",
									"// ===============================\r",
									"if (!userId || userId === \"\" || userId.toLowerCase() === \"null\") {\r",
									"    pm.test(\"userId rỗng hoặc null → 400 Bad Request\", () => {\r",
									"        pm.expect(statusCode).to.eql(400);\r",
									"    });\r",
									"} else if (!/^\\d+$/.test(userId) || /^\\-/.test(userId)) {\r",
									"    pm.test(\"userId sai định dạng hoặc số âm → 400 Bad Request\", () => {\r",
									"        pm.expect(statusCode).to.eql(400);\r",
									"    });\r",
									"} else if (statusCode === 400 && isJson && body.message?.includes(\"đã unactive\")) {\r",
									"    pm.test(\"User đã bị xoá mềm trước đó → 400 Bad Request\", () => {\r",
									"        pm.expect(body.message).to.include(\"đã unactive\");\r",
									"    });\r",
									"} else if (statusCode === 404 && /^\\d+$/.test(userId)) {\r",
									"    pm.test(\"userId không tồn tại → 404 Not Found\", () => {\r",
									"        pm.expect(body.message?.toLowerCase()).to.include(\"không tìm thấy\");\r",
									"    });\r",
									"} else if (statusCode === 403) {\r",
									"    pm.test(\"Không có quyền xóa user → 403 Forbidden\", () => {\r",
									"        pm.expect(body.message?.toLowerCase()).to.match(/không có quyền|bị từ chối/i);\r",
									"    });\r",
									"} else if ([400, 405].includes(statusCode)) {\r",
									"    pm.test(\"Sai method hoặc endpoint → 400/405\", () => {\r",
									"        console.warn(\"Có thể sai method hoặc sai endpoint URL.\");\r",
									"    });\r",
									"} else if (![200, 400, 403, 404, 405].includes(statusCode)) {\r",
									"    pm.test(\"Trường hợp phản hồi không xác định\", () => {\r",
									"        pm.expect(isJson).to.be.true;\r",
									"        console.warn(\"Phản hồi không rõ ràng:\", body);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"//  LỖI 401/500\r",
									"// ===============================\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"500 - Lỗi phía server\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Có lỗi phía backend (logic hoặc server)\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// //Kiểm tra userId đúng\r",
									"// pm.environment.set(\"userId\", \"8\");\r",
									"// //Kiểm tra userId null\r",
									"// pm.environment.set(\"userId\", \"null\");\r",
									"// //Kiểm tra userId rỗng\r",
									"// pm.environment.set(\"userId\", \"\");\r",
									"// //Kiểm tra userId không tông tại\r",
									"// pm.environment.set(\"userId\", \"999\");\r",
									"// //Kiểm tra userId sai định dạng\r",
									"// pm.environment.set(\"userId\", \"abc\");\r",
									"// //Kiểm tra userId giá trị âm\r",
									"// pm.environment.set(\"userId\", \"-1\");\r",
									"// //Kiểm tra userId ký tự đặc biệt\r",
									"// pm.environment.set(\"userId\", \"@\");\r",
									"//Kiểm tra user userId đã bị xóa\r",
									"//pm.environment.set(\"userId\", \"8\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user role to admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ===============================\r",
									"//  KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"const statusCode = pm.response.code;\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"\r",
									"// ===============================\r",
									"//  PARSE JSON PHẢN HỒI AN TOÀN\r",
									"// ===============================\r",
									"let body = {};\r",
									"let isJson = true;\r",
									"try {\r",
									"    body = pm.response.json();\r",
									"} catch (err) {\r",
									"    isJson = false;\r",
									"    console.warn(\"Không parse được JSON:\", err);\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"//  TEST CHUNG\r",
									"// ===============================\r",
									"pm.test(\"Phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(`Mã trạng thái hợp lệ: ${statusCode}`, () => {\r",
									"    pm.expect([200, 400, 401, 403, 404]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
									"pm.test(\"Content-Type là application/json\", () => {\r",
									"    pm.expect(contentType.includes(\"application/json\")).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"// ===============================\r",
									"//  LOGIC KHI STATUS = 200 (THÀNH CÔNG)\r",
									"// ===============================\r",
									"const userId = (pm.environment.get(\"userId\") || \"\").trim();\r",
									"if (/^\\d+$/.test(userId) && statusCode === 200 && isJson) {\r",
									"    pm.test(\"Cập nhật thành công → Vai trò là 'admin'\", () => {\r",
									"        pm.expect(body).to.have.property(\"role\");\r",
									"        pm.expect(body.role).to.eql(\"admin\");\r",
									"        console.log(\"Đã cập nhật role:\", body.role);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"//  XỬ LÝ LỖI KHÁC\r",
									"// ===============================\r",
									"\r",
									"// Hàm helper kiểm tra message có chứa từ khóa\r",
									"function messageMatches(msg, keywords) {\r",
									"    const lower = (msg || \"\").toLowerCase();\r",
									"    return keywords.some(kw => lower.includes(kw));\r",
									"}\r",
									"\r",
									"// userId rỗng hoặc null\r",
									"if (!userId || userId.toLowerCase() === \"null\") {\r",
									"    pm.test(\"userId null hoặc rỗng → 400 Bad Request\", () => {\r",
									"        pm.expect(statusCode).to.eql(400);\r",
									"        if (isJson) {\r",
									"            pm.expect(messageMatches(body.message, [\"user id\", \"trống\", \"thiếu\"])).to.be.true;\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"// userId sai định dạng\r",
									"if (!/^\\d+$/.test(userId)) {\r",
									"    pm.test(\"userId sai định dạng → 400 Bad Request\", () => {\r",
									"        pm.expect(statusCode).to.eql(400);\r",
									"        if (isJson) {\r",
									"            pm.expect(messageMatches(body.message, [\"định dạng\", \"sai\", \"không hợp lệ\", \"ký tự\"])).to.be.true;\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"// userId là số âm\r",
									"if (/^-\\d+$/.test(userId)) {\r",
									"    pm.test(\"userId là số âm → 400 Bad Request\", () => {\r",
									"        pm.expect(statusCode).to.eql(400);\r",
									"        if (isJson) {\r",
									"            pm.expect(messageMatches(body.message, [\"âm\", \"số âm\", \"không hợp lệ\"])).to.be.true;\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"// User đã bị unactive\r",
									"if (statusCode === 400 && isJson && messageMatches(body.message, [\"unactive\", \"vô hiệu\", \"đã xóa\"])) {\r",
									"    pm.test(\"User đã bị xoá mềm → 400 Bad Request\", () => {\r",
									"        pm.expect(statusCode).to.eql(400);\r",
									"        console.warn(\"User bị xoá mềm:\", userId);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Không có quyền (401 hoặc 403)\r",
									"if ([401, 403].includes(statusCode)) {\r",
									"    pm.test(`Không có quyền cập nhật → ${statusCode}`, () => {\r",
									"        pm.expect([401, 403]).to.include(statusCode);\r",
									"        if (isJson) {\r",
									"            pm.expect(messageMatches(body.message, [\r",
									"                \"không có quyền\", \"unauthorized\", \"forbidden\",\r",
									"                \"không thể cập nhật\", \"bị tạm khóa\", \"bị khóa\", \"truy cập bị từ chối\"\r",
									"            ])).to.be.true;\r",
									"        }\r",
									"        console.warn(\"Quyền bị từ chối:\", statusCode);\r",
									"    });\r",
									"}\r",
									"\r",
									"// userId không tồn tại\r",
									"if (/^\\d+$/.test(userId) && statusCode === 404 && isJson) {\r",
									"    pm.test(\"userId không tồn tại → 404 Not Found\", () => {\r",
									"        pm.expect(messageMatches(body.message, [\"không tìm thấy\", \"not found\"])).to.be.true;\r",
									"        console.warn(\"Không tìm thấy user:\", userId);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Trường hợp không xác định rõ\r",
									"if (![200, 400, 401, 403, 404].includes(statusCode)) {\r",
									"    pm.test(\"Phản hồi không rõ ràng\", () => {\r",
									"        pm.expect(isJson).to.be.true;\r",
									"        console.warn(\"Không rõ lý do lỗi:\", body);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"// ===============================\r",
									"//  THÔNG BÁO CHO 401 VÀ 500\r",
									"// ===============================\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"500 - Lỗi phía server\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Có lỗi phía backend (logic hoặc server)\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// //Kiểm tra userId đúng\r",
									"pm.environment.set(\"userId\", \"8\");\r",
									"// //Kiểm tra userId null\r",
									"// pm.environment.set(\"userId\", \"null\");\r",
									"// //Kiểm tra userId rỗng\r",
									"//pm.environment.set(\"userId\", \"\");\r",
									"// //Kiểm tra userId không tông tại\r",
									"// pm.environment.set(\"userId\", \"999\");\r",
									"// //Kiểm tra userId sai định dạng\r",
									"// pm.environment.set(\"userId\", \"abc\");\r",
									"// //Kiểm tra userId giá trị âm\r",
									"//pm.environment.set(\"userId\", \"-1\");\r",
									"// //Kiểm tra userId ký tự đặc biệt\r",
									"//pm.environment.set(\"userId\", \"@\");\r",
									"// //Kiểm tra userId đã bị unactive không cập nhật được\r",
									" //pm.environment.set(\"userId\", \"10\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"role\": \"admin\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ===============================\r",
									"// KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"const statusCode = pm.response.code;\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\"fake-admin-token-999\", \"fake-user-token-123\"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA PHẢN HỒI JSON\r",
									"// ===============================\r",
									"let resData;\r",
									"let isJson = false;\r",
									"\r",
									"try {\r",
									"    resData = pm.response.json();\r",
									"    isJson = true;\r",
									"} catch (err) {\r",
									"    console.warn(\"Không parse được JSON:\", err);\r",
									"}\r",
									"\r",
									"if (!isJson) {\r",
									"    pm.test(\"Phản hồi không phải JSON hợp lệ\", () => {\r",
									"        pm.expect.fail(\"Phản hồi không parse được JSON.\");\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  TEST CHUNG: TIME, STATUS, CONTENT-TYPE\r",
									"// ===============================\r",
									"pm.test(\"Thời gian phản hồi < 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type là application/json\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
									"    pm.expect(contentType.toLowerCase()).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mã trạng thái hợp lệ\", () => {\r",
									"    pm.expect([200, 400, 401, 403, 404, 500]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"//  LOGIC KHI STATUS = 200\r",
									"// ===============================\r",
									"const stringFields = [\"username\", \"role\", \"fullName\", \"email\", \"address\", \"statusName_user\"];\r",
									"const normalize = (str) => str.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").replace(/[^a-z0-9]/g, \"\");\r",
									"const partialMatch = (actual, expected) => normalize(actual).includes(normalize(expected));\r",
									"\r",
									"// Lấy dữ liệu từ environment\r",
									"const envValues = {};\r",
									"stringFields.forEach(field => {\r",
									"    const val = pm.environment.get(field);\r",
									"    if (val && val.trim().toLowerCase() !== \"null\") {\r",
									"        envValues[field] = val.trim();\r",
									"    }\r",
									"});\r",
									"\r",
									"// Kiểm tra định dạng không hợp lệ\r",
									"const isInvalidInput = (field, value) => {\r",
									"    if (!value) return true;\r",
									"    const val = value.trim().toLowerCase();\r",
									"    return (\r",
									"        val === \"\" ||\r",
									"        val === \"null\" ||\r",
									"        /^[\\W_]+$/.test(val) ||\r",
									"        /^\\d+$/.test(val) ||\r",
									"        (field === \"role\" && ![\"user\", \"admin\"].includes(val)) ||\r",
									"        (field === \"statusName_user\" && ![\"active\", \"unactive\"].includes(val))\r",
									"    );\r",
									"};\r",
									"\r",
									"if (statusCode === 200 && Array.isArray(resData)) {\r",
									"    const invalidInputs = Object.entries(envValues).filter(([field, value]) => isInvalidInput(field, value));\r",
									"\r",
									"    if (invalidInputs.length > 0) {\r",
									"        invalidInputs.forEach(([field, value]) => {\r",
									"            pm.test(`'${field}' = '${value}' sai định dạng nhưng vẫn trả 200`, () => {\r",
									"                pm.expect.fail(`Trường '${field}' = '${value}' sai định dạng nhưng API vẫn trả 200`);\r",
									"            });\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.test(\"Response là mảng\", () => {\r",
									"        pm.expect(Array.isArray(resData)).to.be.true;\r",
									"    });\r",
									"\r",
									"    if (resData.length === 0) {\r",
									"        if (invalidInputs.length === 0 && Object.keys(envValues).length > 0) {\r",
									"            pm.test(\"Mảng rỗng nhưng không trả về 404\", () => {\r",
									"                pm.expect.fail(\"Input hợp lệ nhưng không có kết quả → nên trả 404 thay vì 200 + []\");\r",
									"            });\r",
									"        } else {\r",
									"            pm.test(\"Không tìm thấy kết quả nào (mảng rỗng)\", () => {\r",
									"                pm.expect(resData.length).to.eql(0);\r",
									"            });\r",
									"        }\r",
									"\r",
									"        Object.entries(envValues).forEach(([field, value]) => {\r",
									"            const likelyFail = normalize(value) !== value.toLowerCase().replace(/\\s+/g, \"\");\r",
									"            if (likelyFail) {\r",
									"                pm.test(`Có thể backend không normalize trường '${field}'`, () => {\r",
									"                    pm.expect.fail(`Giá trị '${value}' có thể đang bị phân biệt dấu/ký tự/HOA thường`);\r",
									"                });\r",
									"            }\r",
									"        });\r",
									"    } else {\r",
									"        const user = resData[0];\r",
									"\r",
									"        Object.entries(envValues).forEach(([field, expected]) => {\r",
									"            if (user[field]) {\r",
									"                pm.test(`'${field}' chứa '${expected}'`, () => {\r",
									"                    pm.expect(partialMatch(user[field], expected)).to.be.true;\r",
									"                });\r",
									"            } else {\r",
									"                pm.test(`Không có trường '${field}' trong kết quả`, () => {\r",
									"                    console.warn(\"Trường thiếu:\", field);\r",
									"                });\r",
									"            }\r",
									"        });\r",
									"\r",
									"        if (user.email) {\r",
									"            pm.test(\"Email đúng định dạng\", () => {\r",
									"                const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"                pm.expect(emailRegex.test(user.email)).to.be.true;\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  XỬ LÝ STATUS KHÁC\r",
									"// ===============================\r",
									"const msg = (resData.message || \"\").toLowerCase();\r",
									"\r",
									"if (statusCode === 400) {\r",
									"    pm.test(\"400 - Input không hợp lệ\", () => {\r",
									"        pm.expect(msg.length).to.be.above(0);\r",
									"    });\r",
									"\r",
									"    Object.entries(envValues).forEach(([field, value]) => {\r",
									"        if (isInvalidInput(field, value)) {\r",
									"            pm.test(`'${field}' sai định dạng và đã trả về 400`, () => {\r",
									"                pm.expect(statusCode).to.eql(400);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"}\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 403) {\r",
									"    pm.test(\"403 - Không có quyền truy cập\", () => {\r",
									"        pm.expect(msg).to.match(/không có quyền|forbidden|unauthorized/);\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 404) {\r",
									"    pm.test(\"404 - Không tìm thấy dữ liệu\", () => {\r",
									"        pm.expect(msg).to.match(/không tìm thấy|not found/);\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"500 - Lỗi máy chủ\", () => {\r",
									"        pm.expect(msg).to.match(/lỗi|error|exception/);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// //=========USERNAME==========//\r",
									"// // Kiểm tra username,role,fullName,email,address,status không có giá trị\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra username giá trị null\r",
									"// pm.environment.set(\"username\", \"null\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra username thành công\r",
									"// pm.environment.set(\"username\", \"Trang\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"//Kiểm tra username định dạng sai\r",
									"// pm.environment.set(\"username\", \"123\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra username có kí tự đặc biệt\r",
									"// pm.environment.set(\"username\", \"@\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //PASSWORD không được phép tìm kiếm\r",
									"\r",
									"// // //=========ROLE==========//\r",
									"// // Kiểm tra username,role,fullName,email,address,status không có giá trị\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra role giá trị null\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"null\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra role thành công\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"user\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra role định dạng sai\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"123\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra role có kí tự đặc biệt\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"@\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// // Kiểm tra role có giá trị khác user hoặc admin\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"usera\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"\r",
									"// //=========FULLNAME==========//\r",
									"// // Kiểm tra username,role,fullName,email,address,status không có giá trị\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra fullName giá trị null\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"null\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"//Kiểm tra fullName thành công\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \" Nguyễn Trang\");//pm.environment.set(\"fullName\", \"Nguyễn\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra fullName định dạng sai\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"123\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"//Kiểm tra fullName có kí tự đặc biệt\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"@\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"\r",
									"// //=========EMAIL==========//\r",
									"// // Kiểm tra username,role,fullName,email,address,status không có giá trị\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra email giá trị null\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"null\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra email thành công\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"hautran@gmail.com\");//pm.environment.set(\"email\", \"@gmail.com\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra email định dạng sai\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"123\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"\r",
									"// //=========ADDRESS==========//\r",
									"// // Kiểm tra username,role,fullName,email,address,status không có giá trị\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra address giá trị null\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"null\");\r",
									"// //Kiểm tra address thành công\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"Việt Nam\");//pm.environment.set(\"address\", \"Việt\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra address định dạng sai\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"123\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra address có kí tự đặc biệt\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"@\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"\r",
									"// //=========STATUS==========//\r",
									"// // Kiểm tra username,role,fullName,email,address,status không có giá trị\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"\");\r",
									"// //Kiểm tra statusName_user giá trị null\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"null\");\r",
									"// //Kiểm tra statusName_user thành công\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"status\", \"active\");\r",
									"// //Kiểm tra statusName_user định dạng sai\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"123\");\r",
									"// //Kiểm tra statusName_user có kí tự đặc biệt\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"@\");\r",
									"// //Kiểm tra statusName_user có giá trị khác active hoặc unactive\r",
									"// pm.environment.set(\"username\", \"\");\r",
									"// pm.environment.set(\"role\", \"\");\r",
									"// pm.environment.set(\"fullName\", \"\");\r",
									"// pm.environment.set(\"email\", \"\");\r",
									"// pm.environment.set(\"address\", \"\");\r",
									"// pm.environment.set(\"statusName_user\", \"inactive\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users?status={{statusName_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "status",
									"value": "{{statusName_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Place a new book order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//===================TRường hợp bookId luôn đúng============\r",
									"// // //Kiểm tra bookId đúng, userId đúng\r",
									" pm.environment.set(\"bookId\", \"1\"); \r",
									" pm.environment.set(\"userId\", \"2\");\r",
									"// //Kiểm tra bookId đúng, userId null\r",
									"// pm.environment.set(\"bookId\", \"1\"); \r",
									"// pm.environment.set(\"userId\", \"null\");\r",
									"// //Kiểm tra bookId đúng, userId rỗng\r",
									"// pm.environment.set(\"bookId\", \"1\"); \r",
									"// pm.environment.set(\"userId\", \"\");\r",
									"// //Kiểm tra bookId đúng, userId sai định dạng\r",
									"// pm.environment.set(\"bookId\", \"1\"); \r",
									"// pm.environment.set(\"userId\", \"abc\");\r",
									"// //Kiểm tra bookId đúng, userId không tồn tại\r",
									"// pm.environment.set(\"bookId\", \"1\"); \r",
									"// pm.environment.set(\"userId\", \"999\");\r",
									"// //Kiểm tra bookId đúng, userId là kí tự dặc biệt\r",
									"// pm.environment.set(\"bookId\", \"1\"); \r",
									"// pm.environment.set(\"userId\", \"@\");\r",
									"// //Kiểm tra bookId đúng, userId là số âm\r",
									"// pm.environment.set(\"bookId\", \"1\"); \r",
									"// pm.environment.set(\"userId\", \"-1\");\r",
									"// //===================TRường hợp userID luôn đúng============\r",
									"// //Kiểm tra userId đúng và bookId null\r",
									"// pm.environment.set(\"userId\", \"1\");\r",
									"// pm.environment.set(\"bookId\", \"null\"); \r",
									"// //Kiểm tra userId đúng và bookId rỗng\r",
									"// pm.environment.set(\"userId\", \"1\");\r",
									"//  pm.environment.set(\"bookId\", \"\"); \r",
									"// //Kiểm tra userId đúng và bookId sai định dạng\r",
									"// pm.environment.set(\"userId\", \"1\");\r",
									"// pm.environment.set(\"bookId\", \"abc\"); \r",
									"// //Kiểm tra userId đúng và bookId ký tự đặc biệt\r",
									"// pm.environment.set(\"userId\", \"1\");\r",
									"// pm.environment.set(\"bookId\", \"@\"); \r",
									"// //Kiểm tra userId đúng và bookId không tồn tại\r",
									"// pm.environment.set(\"userId\", \"1\");\r",
									"//  pm.environment.set(\"bookId\", \"999\"); \r",
									"// //Kiểm tra userId đúng và bookId số âm\r",
									"// pm.environment.set(\"userId\", \"1\");\r",
									"//  pm.environment.set(\"bookId\", \"-1\"); \r",
									"\r",
									"// Lấy các giá trị từ biến môi trường\r",
									"const userId = parseInt(pm.environment.get(\"userId\"));\r",
									"const bookId = pm.environment.get(\"bookId\");\r",
									"const createdAt = pm.environment.get(\"isoDate\") || new Date().toISOString();\r",
									"const shippingMethod = \"standard\"; // hoặc lấy từ biến nếu cần\r",
									"\r",
									"// Tạo payload\r",
									"const orderPayload = {\r",
									"  userId,\r",
									"  items: [\r",
									"    {\r",
									"      bookId,\r",
									"      quantity: 1\r",
									"    }\r",
									"  ],\r",
									"  createdAt,\r",
									"  shippingMethod\r",
									"};\r",
									"\r",
									"// Set payload vào biến môi trường\r",
									"pm.environment.set(\"orderPayload\", JSON.stringify(orderPayload));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ===============================\r",
									"// . KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const statusCode = pm.response.code;\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\"fake-admin-token-999\", \"fake-user-token-123\"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA PHẢN HỒI JSON\r",
									"// ===============================\r",
									"let resData = {};\r",
									"let isJson = false;\r",
									"\r",
									"try {\r",
									"    resData = pm.response.json();\r",
									"    isJson = true;\r",
									"} catch (err) {\r",
									"    console.warn(\"Không parse được JSON:\", err);\r",
									"}\r",
									"\r",
									"if (!isJson) {\r",
									"    pm.test(\"Phản hồi không phải JSON hợp lệ\", () => {\r",
									"        pm.expect.fail(\"Phản hồi không parse được JSON.\");\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  TEST CHUNG: STATUS, TIME, CONTENT-TYPE\r",
									"// ===============================\r",
									"console.log(`Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"pm.test(\"Phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Mã trạng thái hợp lệ\", () => {\r",
									"    pm.expect([200, 201, 400, 401, 403, 404, 500]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type là application/json\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
									"    pm.expect(contentType.toLowerCase()).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"//  LOGIC KHI STATUS = 201 - TẠO ĐƠN HÀNG\r",
									"// ===============================\r",
									"const expectedUserId = parseInt(pm.environment.get(\"userId\"));\r",
									"const expectedBookId = pm.environment.get(\"bookId\");\r",
									"\r",
									"if (statusCode === 201 && isJson) {\r",
									"    pm.test(\"Status 201 - Tạo đơn hàng thành công\", () => {\r",
									"        pm.expect(statusCode).to.eql(201);\r",
									"    });\r",
									"\r",
									"    pm.test(\"userId hợp lệ và trùng với biến môi trường\", () => {\r",
									"        pm.expect(resData).to.have.property(\"userId\").that.eql(expectedUserId);\r",
									"    });\r",
									"\r",
									"    pm.test(\"shippingMethod hợp lệ\", () => {\r",
									"        pm.expect(resData).to.have.property(\"shippingMethod\").that.is.oneOf([\"standard\", \"express\"]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"createdAt đúng định dạng ISO\", () => {\r",
									"        pm.expect(resData).to.have.property(\"createdAt\");\r",
									"        pm.expect(Date.parse(resData.createdAt)).to.not.be.NaN;\r",
									"    });\r",
									"\r",
									"    pm.test(\"items là mảng hợp lệ và có ít nhất 1 phần tử\", () => {\r",
									"        pm.expect(resData).to.have.property(\"items\").that.is.an(\"array\").that.is.not.empty;\r",
									"    });\r",
									"\r",
									"    resData.items.forEach((item, index) => {\r",
									"        pm.test(`Item ${index + 1} hợp lệ`, () => {\r",
									"            pm.expect(item).to.have.property(\"bookId\").that.eql(expectedBookId);\r",
									"            pm.expect(item).to.have.property(\"quantity\").that.is.a(\"number\").and.above(0);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    if (resData.id) {\r",
									"        pm.environment.set(\"orderId\", resData.id);\r",
									"        console.log(\"Đã lưu orderId:\", resData.id);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  XỬ LÝ CÁC LỖI KHÁC\r",
									"// ===============================\r",
									"const msg = (resData.message || \"\").toLowerCase();\r",
									"\r",
									"if (statusCode === 400) {\r",
									"    pm.test(\"400 - Lỗi do đầu vào không hợp lệ\", () => {\r",
									"        pm.expect(msg.length).to.be.above(0);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Thông báo lỗi liên quan đến dữ liệu không hợp lệ\", () => {\r",
									"        pm.expect(msg).to.match(/bookid|userid|invalid|null|không hợp lệ/i);\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"401 - Không được xác thực\", () => {\r",
									"        pm.expect(msg).to.match(/unauthorized|unauthenticated/i);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Token không hợp lệ hoặc thiếu quyền\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 403) {\r",
									"    pm.test(\"403 - Không có quyền truy cập\", () => {\r",
									"        pm.expect(msg).to.match(/forbidden|không có quyền/i);\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 404) {\r",
									"    pm.test(\"404 - Không tìm thấy dữ liệu\", () => {\r",
									"        pm.expect(msg).to.match(/not found|không tìm thấy/i);\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"500 - Lỗi máy chủ\", () => {\r",
									"        pm.expect(msg).to.match(/lỗi|error|exception/i);\r",
									"        console.warn(\"Có lỗi phía backend (logic hoặc server)\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer  {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//   \"userId\":99 ,\r\n//   \"items\": [\r\n//     {\r\n//       \"bookId\": \"{{bookId}}\",\r\n//       \"quantity\": 1\r\n//     }\r\n//   ],\r\n//   \"createdAt\": \"{{isoDate}}\",\r\n//   \"shippingMethod\": \"standard\"\r\n// }\r\n// {{orderPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ===============================\r",
									"//  KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const statusCode = pm.response.code;\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"//  KIỂM TRA PHẢN HỒI JSON\r",
									"// ===============================\r",
									"let resData;\r",
									"let isJson = false;\r",
									"\r",
									"try {\r",
									"    resData = pm.response.json();\r",
									"    isJson = true;\r",
									"} catch (err) {\r",
									"    console.warn(\"Không parse được JSON:\", err);\r",
									"}\r",
									"\r",
									"if (!isJson) {\r",
									"    pm.test(\"Phản hồi không phải JSON hợp lệ\", () => {\r",
									"        pm.expect.fail(\"Phản hồi không parse được JSON.\");\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  TEST CHUNG: STATUS, TIME, CONTENT-TYPE\r",
									"// ===============================\r",
									"console.log(`Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"pm.test(\"Phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type là application/json\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    pm.expect(contentType).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code là 200\", () => {\r",
									"    pm.expect(statusCode).to.eql(200);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"//  LOGIC KHI STATUS = 200\r",
									"// ===============================\r",
									"if (statusCode === 200 && Array.isArray(resData)) {\r",
									"    pm.test(\"Dữ liệu trả về là mảng các đơn hàng\", () => {\r",
									"        pm.expect(resData).to.be.an(\"array\");\r",
									"        pm.expect(resData.length).to.be.above(0);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Mỗi đơn hàng có đầy đủ thuộc tính cần thiết\", () => {\r",
									"        resData.forEach(order => {\r",
									"            pm.expect(order).to.have.property(\"id\").that.is.a(\"string\");\r",
									"            pm.expect(order).to.have.property(\"userId\").that.is.a(\"number\");\r",
									"            pm.expect(order).to.have.property(\"items\").that.is.an(\"array\");\r",
									"            pm.expect(order).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
									"            pm.expect(order).to.have.property(\"role\").that.is.a(\"string\");\r",
									"\r",
									"            order.items.forEach(item => {\r",
									"                pm.expect(item).to.have.property(\"bookId\").that.is.a(\"string\");\r",
									"                pm.expect(item).to.have.property(\"quantity\").that.is.a(\"number\");\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  XỬ LÝ CÁC LỖI KHÁC\r",
									"// ===============================\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"500 - Lỗi phía server\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\"Có lỗi phía backend (logic hoặc server)\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://bookstore-api-tests.onrender.com/orders",
							"protocol": "http",
							"host": [
								"bookstore-api-tests",
								"onrender",
								"com"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reviews",
			"item": [
				{
					"name": "Get all reviews for book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ==============================\r",
									"//  KIỂM TRA AUTHORIZATION\r",
									"// ==============================\r",
									"const statusCode = pm.response.code;\r",
									"console.log(` Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"// Token nghi giả\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"// Danh sách token giả được chấp nhận khi test\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"// ❌ Nếu token sai mà vẫn trả về 200 → cảnh báo\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\" Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\" Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"\r",
									"// ==============================\r",
									"//  KIỂM TRA PHẢN HỒI JSON\r",
									"// ==============================\r",
									"let json;\r",
									"let isJsonValid = true;\r",
									"try {\r",
									"    json = pm.response.json();\r",
									"} catch (err) {\r",
									"    isJsonValid = false;\r",
									"    json = null;\r",
									"    console.error(\"❌ Phản hồi không phải JSON hợp lệ.\");\r",
									"}\r",
									"\r",
									"pm.test(\" Phản hồi là JSON hợp lệ\", () => {\r",
									"    pm.expect(isJsonValid).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"// ==============================\r",
									"// 🧪 TEST CHUNG CHO STATUS CODE, TIME, CONTENT-TYPE\r",
									"// ==============================\r",
									"const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
									"\r",
									"pm.test(\" Mã trạng thái hợp lệ\", () => {\r",
									"    pm.expect([200, 400, 401, 404, 500]).to.include(statusCode);\r",
									"});\r",
									"\r",
									"pm.test(\" Phản hồi nhanh dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\" Content-Type là application/json\", () => {\r",
									"    pm.expect(contentType.toLowerCase()).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"// ==============================\r",
									"//  KIỂM TRA QUERY PARAM bookId\r",
									"// ==============================\r",
									"const queryKeys = pm.request.url.query.map(q => q.key.toLowerCase());\r",
									"const expectedParam = \"bookid\";\r",
									"const hasCorrectParam = queryKeys.includes(expectedParam);\r",
									"const bookId = pm.request.url.query.find(q => q.key.toLowerCase() === expectedParam)?.value;\r",
									"\r",
									"function isInvalidBookId(id) {\r",
									"    return (\r",
									"        !id ||\r",
									"        id.trim() === \"\" ||\r",
									"        isNaN(Number(id)) ||\r",
									"        Number(id) <= 0 ||\r",
									"        /[^a-zA-Z0-9]/.test(id)\r",
									"    );\r",
									"}\r",
									"\r",
									"pm.test(\" Có param 'bookId' hợp lệ khi gọi API\", () => {\r",
									"    if (!hasCorrectParam && statusCode === 200) {\r",
									"        pm.expect.fail(` Thiếu hoặc sai tên query param 'bookId', nhưng vẫn trả về 200!`);\r",
									"    } else {\r",
									"        pm.expect(hasCorrectParam).to.be.true;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"// ==============================\r",
									"//  LOGIC KHI STATUS = 200\r",
									"// ==============================\r",
									"if (statusCode === 200 && isJsonValid) {\r",
									"    pm.test(\" 200 - Thành công và trả về mảng\", () => {\r",
									"        pm.expect(Array.isArray(json)).to.be.true;\r",
									"    });\r",
									"\r",
									"    if (json.length === 0) {\r",
									"        if (isInvalidBookId(bookId)) {\r",
									"            pm.test(\"Sai: bookId không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"                pm.expect.fail(`bookId = \"${bookId}\" là không hợp lệ, nhưng API trả về 200`);\r",
									"            });\r",
									"        } else {\r",
									"            pm.test(\"ℹ Không có review nào cho bookId hợp lệ\", () => {\r",
									"                pm.expect(json.length).to.eql(0);\r",
									"            });\r",
									"        }\r",
									"    } else {\r",
									"        const review = json[0];\r",
									"\r",
									"        pm.test(\" Review đầu tiên có đủ trường\", () => {\r",
									"            pm.expect(review).to.have.all.keys(\"id\", \"bookId\", \"userId\", \"rating\", \"comment\", \"createdAt\");\r",
									"        });\r",
									"\r",
									"        pm.test(\" Kiểu dữ liệu các trường đúng\", () => {\r",
									"            pm.expect([\"string\", \"number\"]).to.include(typeof review.id);\r",
									"            pm.expect([\"string\", \"number\"]).to.include(typeof review.bookId);\r",
									"            pm.expect(review.userId).to.be.a(\"number\");\r",
									"            pm.expect(review.rating).to.be.a(\"number\");\r",
									"            pm.expect(review.comment).to.be.a(\"string\");\r",
									"            pm.expect(isNaN(Date.parse(review.createdAt))).to.be.false;\r",
									"        });\r",
									"\r",
									"        pm.test(` Tất cả reviews có bookId = \"${bookId}\"`, () => {\r",
									"            json.forEach(r => {\r",
									"                pm.expect(String(r.bookId)).to.eql(bookId);\r",
									"            });\r",
									"        });\r",
									"\r",
									"        // Lưu lại reviewId cho request sau\r",
									"        pm.environment.set(\"reviewId\", review.id);\r",
									"        console.log(\" Đã lưu reviewId:\", review.id);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"// ==============================\r",
									"//  XỬ LÝ TRƯỜNG HỢP LỖI KHÁC\r",
									"// ==============================\r",
									"if (statusCode === 400) {\r",
									"    pm.test(\" 400 - Dữ liệu đầu vào không hợp lệ\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\" bookId có thể rỗng, null, sai định dạng, âm, ký tự đặc biệt,…\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 404) {\r",
									"    pm.test(\"❌ 404 - Không tìm thấy sách\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(` bookId \"${bookId}\" không tồn tại trong hệ thống`);\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\" 401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\" Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\" 500 - Lỗi phía server\", () => {\r",
									"        pm.expect(true).to.be.true;\r",
									"        console.warn(\" Có lỗi phía backend (logic hoặc server)\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// //Kiểm tra bookId đúng\r",
									"//pm.environment.set(\"bookId\", \"1\"); \r",
									" \r",
									"// //Kiểm tra bookId null\r",
									" //pm.environment.set(\"bookId\", \"null\"); \r",
									"\r",
									"// //Kiểm tra bookId rỗng\r",
									"//pm.environment.set(\"bookId\", \"\"); \r",
									"\r",
									"// //Kiểm tra bookId sai định dạng\r",
									"//pm.environment.set(\"bookId\", \"abc\");\r",
									"\r",
									"// //Kiểm tra bookId ký tự đặc biệt\r",
									"//pm.environment.set(\"bookId\", \"@\"); \r",
									"\r",
									"// //Kiểm tra bookId không tồn tại\r",
									"//pm.environment.set(\"bookId\", \"999\"); \r",
									" \r",
									"// //Kiểm tra bookId số âm\r",
									"//  pm.environment.set(\"bookId\", \"-1\"); \r",
									"\r",
									"//pm.environment.set(\"admin_token\",\"fake-admin-token-9\");\r",
									"//pm.environment.set(\"admin_token\",\"fake-admin-token-999\");\r",
									"\r",
									"\r",
									"//pm.environment.set(\"user_token\",\"fake-user-token-9\");\r",
									"//pm.environment.set(\"user_token\",\"fake-user-token-999\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/reviews?bookId={{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reviews"
							],
							"query": [
								{
									"key": "bookId",
									"value": "{{bookId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new review for a book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const iso = new Date().toISOString();\r",
									"// pm.environment.set(\"isoDate\", iso);\r",
									"// console.log(\" ISO Date:\", iso);\r",
									"//Kiểm tra bookId, userId,rating, comment, createdAt hợp lệ\r",
									"pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"  bookId: \"66\",\r",
									"  userId: 6,\r",
									"  rating: 3,\r",
									"  comment: \"Sách cuốn rất\",\r",
									"  createdAt: \"{{isoDate}}\"\r",
									"}));\r",
									"// //Kiểm tra bookId không tồn tại\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"999\",\r",
									"//   userId: 6,\r",
									"//   rating: 3,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// // Kiểm tra bookId sai định dạng\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"abc\",\r",
									"//   userId: 6,\r",
									"//   rating: 3,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// //Kiểm tra bookId trống\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"\",\r",
									"//   userId: 6,\r",
									"//   rating: 3,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// //Kiểm tra bookId giá trị null\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: null,\r",
									"//   userId: 6,\r",
									"//   rating: 3,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// //Kiểm tra userId không tồn tại\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 999,\r",
									"//   rating: 3,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// //Kiểm tra userId trống\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: \"\",\r",
									"//   rating: 3,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// //Kiểm tra userId sai định dạng\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: \"abc\",\r",
									"//   rating: 3,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// Kiểm tra userId null\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: null,\r",
									"//   rating: 3,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"//Kiểm tra rating không hợp lệ\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: 6,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// //Kiểm tra rating trống\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: \"\",\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"//Kiểm tra rating sai định dạng\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: \"abc\",\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"//   }));\r",
									"// //Kiểm tra rating không hợp lệ\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: 6,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// //Kiểm tra rating trống\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: \"\",\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// //Kiểm tra rating sai định dạng\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: \"abc\",\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// // Kiểm tra rating null\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: null,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"//Kiểm tra rating lớn hơn 5\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: 6,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// Kiểm tra rating nhỏ hơn 1\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: 0,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"\r",
									"// //Kiểm tra comment trống\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: 3,\r",
									"//   comment: \"\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"//Kiểm tra comment sai định dạng\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: 3,\r",
									"//   comment: 123,\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// //Kiểm tra comment trống\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: 3,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// //Kiểm ta comment null\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: 3,\r",
									"//   comment: \"null\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));\r",
									"// Kiểm tra tạo review thiếu trường bookId,userId,rating,comment,createdAt\r",
									"// pm.environment.set(\"reviewBody\", JSON.stringify({\r",
									"//   bookId: \"6\",\r",
									"//   userId: 6,\r",
									"//   rating: 3,\r",
									"//   comment: \"Sách cuốn rất\",\r",
									"//   createdAt: \"{{isoDate}}\"\r",
									"// }));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;\r",
									"console.log(` Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"// ===============================\r",
									"//   KIỂM TRA AUTHORIZATION\r",
									"// ===============================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\"fake-admin-token-999\", \"fake-user-token-123\"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"❌ Token không hợp lệ nhưng API vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\" Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"//   KIỂM TRA PHẢN HỒI CHUNG\r",
									"// ===============================\r",
									"pm.test(\" Phản hồi dưới 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
									"pm.test(\" Content-Type là JSON\", () => {\r",
									"    pm.expect(contentType.toLowerCase()).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"let reviewBody = {};\r",
									"try {\r",
									"    reviewBody = JSON.parse(pm.environment.get(\"reviewBody\") || \"{}\");\r",
									"} catch (e) {\r",
									"    console.warn(\"⚠️ Không parse được reviewBody từ environment\");\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//   XỬ LÝ STATUS = 201 (THÀNH CÔNG)\r",
									"// ===============================\r",
									"if (statusCode === 201) {\r",
									"    let review;\r",
									"    try {\r",
									"        review = pm.response.json();\r",
									"    } catch (e) {\r",
									"        pm.test(\"❌ Phản hồi không phải JSON\", () => {\r",
									"            throw new Error(\"Không parse được JSON từ phản hồi\");\r",
									"        });\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    pm.test(\" Review có đủ các trường bắt buộc\", () => {\r",
									"        [\"id\", \"bookId\", \"userId\", \"rating\", \"comment\", \"createdAt\"].forEach(field => {\r",
									"            pm.expect(review).to.have.property(field);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    pm.test(\" Kiểu dữ liệu từng trường hợp lệ\", () => {\r",
									"        pm.expect(review.id).to.satisfy(id => typeof id === 'string' || typeof id === 'number');\r",
									"        pm.expect(review.bookId).to.satisfy(id => typeof id === 'string' || typeof id === 'number');\r",
									"        pm.expect(review.userId).to.be.a(\"number\");\r",
									"        pm.expect(review.rating).to.be.a(\"number\");\r",
									"        pm.expect(review.comment).to.be.a(\"string\");\r",
									"        pm.expect(Date.parse(review.createdAt)).to.not.be.NaN;\r",
									"    });\r",
									"\r",
									"    pm.test(\" Rating nằm trong khoảng 1–5\", () => {\r",
									"        pm.expect(review.rating).to.be.within(1, 5);\r",
									"    });\r",
									"\r",
									"    pm.environment.set(\"reviewId\", review.id);\r",
									"    console.log(\" Đã lưu reviewId:\", review.id);\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//   XỬ LÝ STATUS = 400 / 401 / 404 / 500\r",
									"// ===============================\r",
									"else if ([400, 401, 404, 500].includes(statusCode)) {\r",
									"    let responseJson = {};\r",
									"    let isJson = true;\r",
									"\r",
									"    try {\r",
									"        responseJson = pm.response.json();\r",
									"    } catch (e) {\r",
									"        isJson = false;\r",
									"        console.warn(\" Không parse được JSON từ phản hồi lỗi\");\r",
									"    }\r",
									"\r",
									"    pm.test(\" Phản hồi lỗi là JSON hợp lệ\", () => {\r",
									"        pm.expect(isJson).to.be.true;\r",
									"    });\r",
									"\r",
									"    if (!isJson) return;\r",
									"\r",
									"    const msg = (responseJson.message || \"\").toLowerCase();\r",
									"\r",
									"   // ===============================\r",
									"// ===============================\r",
									"//   STATUS 400 - Bad Request\r",
									"// ===============================\r",
									"if (statusCode === 400) {\r",
									"    pm.test(\" 400 - Dữ liệu đầu vào không hợp lệ\", () => {\r",
									"        pm.expect(msg).to.match(/invalid|null|bad request|không hợp lệ|trường bắt buộc|nguyên dương|không tồn tại|rating phải là số từ 1 đến 5|khoảng trắng/);\r",
									"    });\r",
									"\r",
									"    const { bookId, userId, rating, comment } = reviewBody;\r",
									"\r",
									"    // Biểu thức kiểm tra ký tự đặc biệt không hợp lệ (ngoại trừ tiếng Việt, số, dấu câu)\r",
									"    const specialCharPattern = /[^a-zA-Z0-9\\s.,!?áàảãạăắằẳẵặâấầẩẫậéèẻẽẹêếềểễệíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵđĐ]/;\r",
									"\r",
									"    // ===== Kiểm tra bookId =====\r",
									"    if (bookId === \"\" || bookId === null || bookId === \"abc\") {\r",
									"        pm.test(\"❌ bookId không hợp lệ (rỗng/null/abc)\", () => {\r",
									"            pm.expect(statusCode).to.eql(400);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    if (typeof bookId === \"string\" && specialCharPattern.test(bookId)) {\r",
									"        pm.test(\"❌ bookId chứa ký tự đặc biệt không hợp lệ\", () => {\r",
									"            pm.expect.fail(`bookId chứa ký tự không hợp lệ: \"${bookId}\"`);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    // ===== Kiểm tra userId =====\r",
									"    if (userId === \"\" || userId === null || userId === \"abc\") {\r",
									"        pm.test(\"❌ userId không hợp lệ (rỗng/null/abc)\", () => {\r",
									"            pm.expect(statusCode).to.eql(400);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    if (typeof userId === \"string\" && specialCharPattern.test(userId)) {\r",
									"        pm.test(\"❌ userId chứa ký tự đặc biệt không hợp lệ\", () => {\r",
									"            pm.expect.fail(`userId chứa ký tự không hợp lệ: \"${userId}\"`);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    // ===== Kiểm tra rating =====\r",
									"    if (rating === \"\" || rating === null || isNaN(rating) || rating < 1 || rating > 5) {\r",
									"        pm.test(\"❌ rating không hợp lệ\", () => {\r",
									"            pm.expect(statusCode).to.eql(400);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    // ===== Kiểm tra comment =====\r",
									"    if (typeof comment !== \"string\" || comment === \"\") {\r",
									"        pm.test(\"❌ comment không hợp lệ (rỗng hoặc không phải string)\", () => {\r",
									"            pm.expect(statusCode).to.eql(400);\r",
									"        });\r",
									"    } else if (specialCharPattern.test(comment)) {\r",
									"        pm.test(\"❌ comment chứa ký tự đặc biệt không hợp lệ\", () => {\r",
									"            pm.expect.fail(`Comment chứa ký tự không hợp lệ: \"${comment}\"`);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"    // ==== 401 - Unauthorized ====\r",
									"    if (statusCode === 401) {\r",
									"        pm.test(\" 401 - Không xác thực hoặc không có quyền\", () => {\r",
									"            pm.expect(true).to.be.true;\r",
									"            console.warn(\" Kiểm tra lại token hoặc phân quyền\");\r",
									"        });\r",
									"    }\r",
									"\r",
									"    // ==== 404 - Not Found ====\r",
									"    if (statusCode === 404) {\r",
									"        pm.test(\" 404 - Không tìm thấy dữ liệu\", () => {\r",
									"            pm.expect(msg).to.match(/not found|không tìm thấy/);\r",
									"        });\r",
									"\r",
									"        const notFoundBookIds = JSON.parse(pm.environment.get(\"notFoundBookIds\") || \"[]\");\r",
									"        const notFoundUserIds = JSON.parse(pm.environment.get(\"notFoundUserIds\") || \"[]\");\r",
									"\r",
									"        if (notFoundBookIds.includes(reviewBody.bookId) || notFoundUserIds.includes(reviewBody.userId)) {\r",
									"            pm.test(\" bookId hoặc userId không tồn tại\", () => {\r",
									"                pm.expect(true).to.be.true;\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"\r",
									"    // ==== 500 - Server Error ====\r",
									"    if (statusCode === 500) {\r",
									"        pm.test(\" 500 - Lỗi server nội bộ\", () => {\r",
									"            pm.expect(msg).to.match(/lỗi|error|exception|server/i);\r",
									"        });\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{reviewBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/reviews",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Update password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;\r",
									"console.log(` Thời gian phản hồi: ${pm.response.responseTime} ms`);\r",
									"\r",
									"// ===============================\r",
									"//  KIỂM TRA HEADER AUTHORIZATION\r",
									"// ===============================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"// === Kiểm tra token không hợp lệ nhưng vẫn trả về 200 ===\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\"❌ Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"// === Test: Authorization hợp lệ ===\r",
									"pm.test(\" Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"// PARSE JSON RESPONSE\r",
									"// ===============================\r",
									"let json = {};\r",
									"let parseError = false;\r",
									"\r",
									"try {\r",
									"    json = pm.response.json();\r",
									"} catch (e) {\r",
									"    parseError = true;\r",
									"    console.error(\"❌ Không parse được JSON response\");\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  LẤY THÔNG TIN TỪ RESPONSE\r",
									"// ===============================\r",
									"const newPassword = json.password || \"\";\r",
									"const oldPassword = pm.environment.get(\"oldPassword\") || \"\";\r",
									"const userId = pm.request.url.path.slice(-1)[0] || json.id || \"\";\r",
									"const isUserIdValid = userId && /^\\d+$/.test(userId);\r",
									"\r",
									"// ===============================\r",
									"//  KIỂM TRA THEO STATUS CODE\r",
									"// ===============================\r",
									"switch (statusCode) {\r",
									"    case 200:\r",
									"        pm.test(\" Status 200 - Thành công\", () => {\r",
									"            pm.expect(statusCode).to.eql(200);\r",
									"        });\r",
									"\r",
									"        // Kiểm tra Content-Type\r",
									"        pm.test(\" Content-Type là JSON\", () => {\r",
									"            const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"            pm.expect(contentType).to.include(\"application/json\");\r",
									"        });\r",
									"\r",
									"        // userId hợp lệ\r",
									"        pm.test(\" userId hợp lệ (số nguyên dương)\", () => {\r",
									"            pm.expect(isUserIdValid, `❌ userId không hợp lệ: ${userId}`).to.be.true;\r",
									"        });\r",
									"\r",
									"        // Mật khẩu đủ mạnh\r",
									"        pm.test(\" Mật khẩu mạnh\", () => {\r",
									"            pm.expect(newPassword.length >= 8, \"❌ Mật khẩu < 8 ký tự\").to.be.true;\r",
									"            pm.expect(/[!@#$%^&*(),.?\":{}|<>]/.test(newPassword), \"❌ Mật khẩu thiếu ký tự đặc biệt\").to.be.true;\r",
									"        });\r",
									"\r",
									"        // So sánh mật khẩu mới và cũ\r",
									"        if (oldPassword) {\r",
									"            pm.test(\" Mật khẩu mới khác mật khẩu cũ\", () => {\r",
									"                pm.expect(newPassword, \"❌ Mật khẩu mới trùng mật khẩu cũ\").to.not.eql(oldPassword);\r",
									"            });\r",
									"        }\r",
									"\r",
									"        // Kiểm tra trạng thái tài khoản\r",
									"        pm.test(\"Tài khoản không bị khóa\", () => {\r",
									"            pm.expect(json.status, \"❌ Tài khoản đang bị tạm khóa\").to.not.eql(\"unactive\");\r",
									"        });\r",
									"\r",
									"        break;\r",
									"\r",
									"    case 400:\r",
									"        pm.test(\" Status 400 - Dữ liệu không hợp lệ\", () => {\r",
									"            pm.expect(statusCode).to.eql(400);\r",
									"        });\r",
									"\r",
									"        // Debug các lỗi tiềm ẩn\r",
									"        if (!isUserIdValid) {\r",
									"            console.error(\" Lỗi: userId không hợp lệ.\");\r",
									"        }\r",
									"\r",
									"        if (newPassword === oldPassword) {\r",
									"            console.error(\" Lỗi: Mật khẩu mới trùng với mật khẩu cũ.\");\r",
									"        }\r",
									"\r",
									"        if (newPassword.length < 8 || !/[!@#$%^&*(),.?\":{}|<>]/.test(newPassword)) {\r",
									"            console.error(\"Lỗi: Mật khẩu yếu.\");\r",
									"        }\r",
									"\r",
									"        break;\r",
									"\r",
									"    case 401:\r",
									"        pm.test(\" 401 - Chưa xác thực hoặc không có quyền\", () => {\r",
									"            pm.expect(true).to.be.true;\r",
									"        });\r",
									"        console.warn(\" Cần kiểm tra lại token hoặc quyền truy cập\");\r",
									"        break;\r",
									"\r",
									"    case 403:\r",
									"        pm.test(\" 403 - Không đủ quyền\", () => {\r",
									"            pm.expect(statusCode).to.eql(403);\r",
									"        });\r",
									"        console.warn(\" Bạn không có quyền thực hiện hành động này.\");\r",
									"        break;\r",
									"            case 404:\r",
									"        pm.test(\" 404 - Không tìm thấy người dùng\", () => {\r",
									"            pm.expect(statusCode).to.eql(404);\r",
									"        });\r",
									"\r",
									"        // Kiểm tra nếu userId null hoặc không hợp lệ\r",
									"        if (!isUserIdValid) {\r",
									"            console.warn(\"  userId không hợp lệ hoặc không tồn tại.\");\r",
									"        }\r",
									"\r",
									"        // Có thể kiểm tra thêm message từ response\r",
									"       if (!parseError && json.message) {\r",
									"    const message = json.message.toLowerCase();\r",
									"    const validKeywords = [\"not found\", \"missing\", \"invalid\", \"error\", \"không tìm thấy\", \"không tồn tại\"];\r",
									"\r",
									"    const hasMatch = validKeywords.some(keyword => message.includes(keyword));\r",
									"\r",
									"    pm.test(\" Message phản hồi chứa từ khóa hợp lệ\", () => {\r",
									"        pm.expect(hasMatch).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"    case 500:\r",
									"        pm.test(\" 500 - Lỗi phía server\", () => {\r",
									"            pm.expect(true).to.be.true;\r",
									"        });\r",
									"        console.warn(\" Có lỗi phía backend (logic hoặc server)\");\r",
									"        break;\r",
									"\r",
									"    default:\r",
									"        pm.test(` Status code không được xử lý: ${statusCode}`, () => {\r",
									"            pm.expect([200, 400, 401, 403, 500]).to.include(statusCode);\r",
									"        });\r",
									"        console.warn(` Trạng thái không nằm trong danh sách kiểm tra: ${statusCode}`);\r",
									"        break;\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  KIỂM TRA THỜI GIAN PHẢN HỒI\r",
									"// ===============================\r",
									"const maxResponseTime = 1000;\r",
									"pm.test(\" Phản hồi < 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);\r",
									"});\r",
									"\r",
									"// ===============================\r",
									"//  LOG DEBUG\r",
									"// ===============================\r",
									"console.log(\" userId:\", userId);\r",
									"console.log(\" newPassword:\", newPassword);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// //Kiểm tra userId đúng\r",
									"// pm.environment.set(\"userId\", \"1\");\r",
									"// //Kiểm tra userId null\r",
									"//pm.environment.set(\"userId\", \"null\");\r",
									"// //Kiểm tra userId rỗng\r",
									"//pm.environment.set(\"userId\", \"\");\r",
									"// //Kiểm tra userId không tông tại\r",
									"//pm.environment.set(\"userId\", \"999\");\r",
									"// //Kiểm tra userId sai định dạng\r",
									"//pm.environment.set(\"userId\", \"abc\");\r",
									"// //Kiểm tra userId giá trị âm\r",
									"// pm.environment.set(\"userId\", \"-1\");\r",
									"// //Kiểm tra userId ký tự đặc biệt\r",
									"//pm.environment.set(\"userId\", \"@\");\r",
									"//Kiểm tra password đúng\r",
									"pm.environment.set(\"passwordBody\", JSON.stringify({\r",
									"    \"password\": \"password123@@\" // \r",
									"}));\r",
									"// //Kiểm tra password null\r",
									"// pm.environment.set(\"passwordBody\", JSON.stringify({\r",
									"//     \"password\": null\r",
									"// }));\r",
									"// //Kiểm tra password rỗng\r",
									"// pm.environment.set(\"passwordBody\", JSON.stringify({\r",
									"//     \"password\": \"\"\r",
									"// }));\r",
									"// // //Kiểm tra password trùng lặp\r",
									"// pm.environment.set(\"passwordBody\", JSON.stringify({\r",
									"//     \"password\": \"password123@\"\r",
									"// }));\r",
									"// //Kiểm tra password không đủ ký tự(8 ký tự )\r",
									"// pm.environment.set(\"passwordBody\", JSON.stringify({\r",
									"//     \"password\": \"pas1@\"\r",
									"// }));\r",
									"// //Kiểm tra password thiếu kí tự đặc biệt\r",
									"// pm.environment.set(\"passwordBody\", JSON.stringify({\r",
									"//     \"password\": \"password123\"\r",
									"// }));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{passwordBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA AUTHORIZATION HEADER\r",
									"// ===============================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"pm.test(\" Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\" Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  KIỂM TRA PHẢN HỒI DỮ LIỆU\r",
									"// ===============================\r",
									"let jsonData = {};\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.warn(\" Không thể parse JSON từ phản hồi.\");\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  GÁN TOKEN SAU KHI LOGIN THÀNH CÔNG\r",
									"// ===============================\r",
									"if (statusCode === 200 && jsonData.access_token) {\r",
									"    const role = jsonData?.user?.role;\r",
									"\r",
									"    pm.environment.set(\"token\", jsonData.access_token); // biến dùng chung cho các request\r",
									"\r",
									"    if (role === \"admin\") {\r",
									"        pm.environment.set(\"admin_token\", jsonData.access_token);\r",
									"    } else if (role === \"user\") {\r",
									"        pm.environment.set(\"user_token\", jsonData.access_token);\r",
									"    }\r",
									"\r",
									"    console.log(`✅ Token đã được lưu vào biến môi trường (${role}_token)`);\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  KIỂM TRA THEO MÃ TRẠNG THÁI\r",
									"// ===============================\r",
									"switch (statusCode) {\r",
									"    case 200:\r",
									"        pm.test(\" Mã trạng thái là 200\", () => {\r",
									"            pm.response.to.have.status(200);\r",
									"        });\r",
									"\r",
									"        pm.test(\" Content-Type bao gồm application/json\", () => {\r",
									"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"        });\r",
									"\r",
									"        pm.test(\" Thời gian phản hồi < 1000ms\", () => {\r",
									"            pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"        });\r",
									"\r",
									"        pm.test(\" Phản hồi chứa access_token và thông tin người dùng\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"            pm.expect(jsonData).to.have.property(\"user\");\r",
									"        });\r",
									"        break;\r",
									"\r",
									"    case 400:\r",
									"        pm.test(\" Mã trạng thái 400 - Thiếu hoặc sai định dạng\", () => {\r",
									"            pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"        pm.test(\" Phản hồi chứa thông báo lỗi xác thực\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"message\");\r",
									"            pm.expect(jsonData.message.toLowerCase()).to.satisfy(msg =>\r",
									"                msg.includes(\"username\") || msg.includes(\"password\")\r",
									"            );\r",
									"        });\r",
									"        break;\r",
									"\r",
									"    case 401:\r",
									"        pm.test(\" Mã trạng thái 401 - Chưa xác thực hoặc sai token\", () => {\r",
									"            pm.response.to.have.status(401);\r",
									"        });\r",
									"\r",
									"        pm.test(\" Phản hồi chứa thông báo lỗi đăng nhập thất bại\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"message\");\r",
									"            pm.expect(jsonData.message.toLowerCase()).to.include(\"login failed\");\r",
									"        });\r",
									"\r",
									"        console.warn(\" Token sai hoặc không có quyền. Kiểm tra lại xác thực.\");\r",
									"        break;\r",
									"\r",
									"    case 403:\r",
									"        pm.test(\" Mã trạng thái 403 - Bị từ chối quyền truy cập\", () => {\r",
									"            pm.response.to.have.status(403);\r",
									"        });\r",
									"\r",
									"        pm.test(\" Phản hồi chứa thông báo lỗi quyền truy cập\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"message\");\r",
									"            pm.expect(jsonData.message.toLowerCase()).to.match(/access denied|không được phép/i);\r",
									"        });\r",
									"        break;\r",
									"\r",
									"    case 500:\r",
									"        pm.test(\" Mã trạng thái 500 - Lỗi phía server\", () => {\r",
									"            pm.response.to.have.status(500);\r",
									"        });\r",
									"\r",
									"        console.warn(\" Lỗi phía backend (logic hoặc server)\");\r",
									"        break;\r",
									"\r",
									"    default:\r",
									"        pm.test(` Không xử lý cụ thể cho mã trạng thái ${statusCode}`, () => {\r",
									"            pm.expect(statusCode).to.be.oneOf([200, 400, 401, 403, 500]);\r",
									"        });\r",
									"        break;\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// // //Kiểm tra password, user đúng\r",
									"// pm.environment.set(\"passwordBody\", JSON.stringify({\r",
									"//    \"username\": \"ly123\", \"password\": \"abcdefg@h\" \r",
									"// }));\r",
									"// // //Kiểm tra password, user không đúng\r",
									"// pm.environment.set(\"passwordBody_Admin\", JSON.stringify({\r",
									"//     \"username\": \"ly1231\", \"password\": \"abcdefg@h\"\r",
									"// }));\r",
									"// // Kiểm tra user đúng password sai\r",
									"// pm.environment.set(\"passwordBody\", JSON.stringify({\r",
									"//     \"username\": \"ly123\", \"password\": \"wrongpassword\"\r",
									"// }));\r",
									"// // Kiểm tra user rổng\r",
									"// pm.environment.set(\"passwordBody\", JSON.stringify({\r",
									"//     \"username\": \"\", \"password\": \"abcdefg@h\"\r",
									"// }));\r",
									"// // Kiểm tra password rỗng\r",
									"// pm.environment.set(\"passwordBody\", JSON.stringify({\r",
									"//     \"username\": \"ly123\", \"password\": \"\"\r",
									"// }));\r",
									"// // Kiểm tra user và password rỗng\r",
									"// pm.environment.set(\"passwordBody\", JSON.stringify({\r",
									"//     \"username\": \"\", \"password\": \"\"\r",
									"// }));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login_user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;\r",
									"\r",
									"// ===============================\r",
									"// KIỂM TRA AUTHORIZATION HEADER\r",
									"// ===============================\r",
									"const authHeader = pm.request.headers.find(h => h.key.toLowerCase() === 'authorization')?.value || '';\r",
									"const token = authHeader.replace('Bearer ', '').trim();\r",
									"\r",
									"const looksInvalidToken =\r",
									"    !authHeader ||\r",
									"    !authHeader.startsWith(\"Bearer \") ||\r",
									"    token.length < 10 ||\r",
									"    /(fake|test|invalid|null|NaN)/i.test(token);\r",
									"\r",
									"const fakeTokenWhitelist = [\r",
									"    \"fake-admin-token-999\",\r",
									"    \"fake-user-token-123\"\r",
									"];\r",
									"const isWhitelistedFake = fakeTokenWhitelist.includes(token);\r",
									"\r",
									"pm.test(\" Header Authorization tồn tại và hợp lệ\", () => {\r",
									"    pm.expect(authHeader).to.include(\"Bearer \");\r",
									"    pm.expect(token.length).to.be.greaterThan(10);\r",
									"});\r",
									"\r",
									"if (looksInvalidToken && statusCode === 200 && !isWhitelistedFake) {\r",
									"    pm.test(\" Token không hợp lệ nhưng vẫn trả về 200\", () => {\r",
									"        pm.expect.fail(`Token \"${token}\" không hợp lệ nhưng API vẫn trả về 200`);\r",
									"    });\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  KIỂM TRA PHẢN HỒI DỮ LIỆU\r",
									"// ===============================\r",
									"let jsonData = {};\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.warn(\" Không thể parse JSON từ phản hồi.\");\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  GÁN TOKEN SAU KHI LOGIN THÀNH CÔNG\r",
									"// ===============================\r",
									"if (statusCode === 200 && jsonData.access_token) {\r",
									"    const role = jsonData?.user?.role;\r",
									"\r",
									"    pm.environment.set(\"token\", jsonData.access_token); // biến dùng chung cho các request\r",
									"\r",
									"    if (role === \"admin\") {\r",
									"        pm.environment.set(\"admin_token\", jsonData.access_token);\r",
									"    } else if (role === \"user\") {\r",
									"        pm.environment.set(\"user_token\", jsonData.access_token);\r",
									"    }\r",
									"\r",
									"    console.log(`✅ Token đã được lưu vào biến môi trường (${role}_token)`);\r",
									"}\r",
									"\r",
									"// ===============================\r",
									"//  KIỂM TRA THEO MÃ TRẠNG THÁI\r",
									"// ===============================\r",
									"switch (statusCode) {\r",
									"    case 200:\r",
									"        pm.test(\" Mã trạng thái là 200\", () => {\r",
									"            pm.response.to.have.status(200);\r",
									"        });\r",
									"\r",
									"        pm.test(\" Content-Type bao gồm application/json\", () => {\r",
									"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"        });\r",
									"\r",
									"        pm.test(\" Thời gian phản hồi < 1000ms\", () => {\r",
									"            pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"        });\r",
									"\r",
									"        pm.test(\" Phản hồi chứa access_token và thông tin người dùng\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"            pm.expect(jsonData).to.have.property(\"user\");\r",
									"        });\r",
									"        break;\r",
									"\r",
									"    case 400:\r",
									"        pm.test(\" Mã trạng thái 400 - Thiếu hoặc sai định dạng\", () => {\r",
									"            pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"        pm.test(\" Phản hồi chứa thông báo lỗi xác thực\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"message\");\r",
									"            pm.expect(jsonData.message.toLowerCase()).to.satisfy(msg =>\r",
									"                msg.includes(\"username\") || msg.includes(\"password\")\r",
									"            );\r",
									"        });\r",
									"        break;\r",
									"\r",
									"    case 401:\r",
									"        pm.test(\" Mã trạng thái 401 - Chưa xác thực hoặc sai token\", () => {\r",
									"            pm.response.to.have.status(401);\r",
									"        });\r",
									"\r",
									"        pm.test(\" Phản hồi chứa thông báo lỗi đăng nhập thất bại\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"message\");\r",
									"            pm.expect(jsonData.message.toLowerCase()).to.include(\"login failed\");\r",
									"        });\r",
									"\r",
									"        console.warn(\" Token sai hoặc không có quyền. Kiểm tra lại xác thực.\");\r",
									"        break;\r",
									"\r",
									"    case 403:\r",
									"        pm.test(\" Mã trạng thái 403 - Bị từ chối quyền truy cập\", () => {\r",
									"            pm.response.to.have.status(403);\r",
									"        });\r",
									"\r",
									"        pm.test(\" Phản hồi chứa thông báo lỗi quyền truy cập\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"message\");\r",
									"            pm.expect(jsonData.message.toLowerCase()).to.match(/access denied|không được phép/i);\r",
									"        });\r",
									"        break;\r",
									"\r",
									"    case 500:\r",
									"        pm.test(\" Mã trạng thái 500 - Lỗi phía server\", () => {\r",
									"            pm.response.to.have.status(500);\r",
									"        });\r",
									"\r",
									"        console.warn(\" Lỗi phía backend (logic hoặc server)\");\r",
									"        break;\r",
									"\r",
									"    default:\r",
									"        pm.test(` Không xử lý cụ thể cho mã trạng thái ${statusCode}`, () => {\r",
									"            pm.expect(statusCode).to.be.oneOf([200, 400, 401, 403, 500]);\r",
									"        });\r",
									"        break;\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// //Kiểm tra password, user đúng\r",
									"pm.environment.set(\"passwordBody_Admin\", JSON.stringify({\r",
									"  \"username\": \"admin\",\r",
									"  \"password\": \"asvjdfk@a\"\r",
									"}));\r",
									"// //  Kiểm Tra Password  sai\r",
									"// pm.environment.set(\"passwordBody_Admin\", JSON.stringify({\r",
									"//     \"username\": \"admin\",\r",
									"//     \"password\": \"asvjdfkb\"\r",
									"// }));\r",
									"// // Kiểm tra user sai\r",
									"// pm.environment.set(\"passwordBody_Admin\", JSON.stringify({\r",
									"//     \"username\": \"admin123\",\r",
									"//     \"password\": \"asvjdfk@a\"\r",
									"// }));\r",
									"// // Kiểm tra password rỗng\r",
									"// pm.environment.set(\"passwordBody_Admin\", JSON.stringify({\r",
									"//     \"username\": \"admin\",\r",
									"//     \"password\": \"\"\r",
									"// }));\r",
									"// // Kiểm tra user rỗng\r",
									"// pm.environment.set(\"passwordBody_Admin\", JSON.stringify({\r",
									"//     \"username\": \"\",\r",
									"//     \"password\": \"asvjdfk@a\"\r",
									"// }));\r",
									"// // Kiểm tra password và user rỗng\r",
									"// pm.environment.set(\"passwordBody_Admin\", JSON.stringify({\r",
									"//     \"username\": \"\",\r",
									"//     \"password\": \"\"\r",
									"// }));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"admin\", \"password\": \"asvjdfk@a\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login_admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login_admin"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}